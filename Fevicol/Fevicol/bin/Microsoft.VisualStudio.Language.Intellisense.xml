<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Language.Intellisense</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1">
      <summary>Represents an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> that includes the AddRange() operation.</summary>
      <typeparam name="T">The type of the collection.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.#ctor">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Adds a list of items to the collection without firing an event for each item.</summary>
      <param name="items">A list of items to add.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.AsReadOnly">
      <summary>Gets a read-only version of the collection.</summary>
      <returns>A read-only version of the collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.BeginBulkOperation">
      <summary>Suspends change events on the collection in order to perform a bulk change operation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.ClearItems">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.EndBulkOperation">
      <summary>Restores change events on the collection after a bulk change operation has been completed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.InsertItem(System.Int32,`0)">
      <summary>Inserts an item at the specified index.</summary>
      <param name="index">The location at which to insert the item.</param>
      <param name="item">The item to insert.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.MoveItem(System.Int32,System.Int32)">
      <summary>Moves the item from one location to another.</summary>
      <param name="oldIndex">The original location.</param>
      <param name="newIndex">The new location.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Raised when the collection has changed.</summary>
      <param name="e">
        <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"></member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.RemoveItem(System.Int32)">
      <summary>Removes an item from the collection at the specified location.</summary>
      <param name="index">The location at which to remove the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.SetItem(System.Int32,`0)">
      <summary>Replaces the item at the specified location.</summary>
      <param name="index">The location at which to replace the item.</param>
      <param name="item">The item to replace.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.Completion">
      <summary>Represents a completion item, including the icon, insertion text, and display text, in a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion" /> with the specified display text.</summary>
      <param name="displayText">The text that is to be displayed by an IntelliSense presenter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion.#ctor(System.String,System.String,System.String,System.Windows.Media.ImageSource,System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion" /> with the specified text and description.</summary>
      <param name="displayText">The text that is to be displayed by an IntelliSense presenter.</param>
      <param name="insertionText">The text that is to be inserted into the buffer if this completion is committed.</param>
      <param name="description">A description that can be displayed with the display text of the completion.</param>
      <param name="iconSource">The icon.</param>
      <param name="iconAutomationText">The text to be used as the automation name for the icon. </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion.Description">
      <summary>Gets a description that can be displayed together with the display text of the completion.</summary>
      <returns>The description.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion.DisplayText">
      <summary>Gets the text that is to be displayed by an IntelliSense presenter.</summary>
      <returns>The display text.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion.IconAutomationText">
      <summary>Gets or sets the text to be used as the automation name for the icon when it is displayed.</summary>
      <returns>The icon automation text.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion.IconSource">
      <summary>Gets or sets an icon that could be used to describe the completion.</summary>
      <returns>The icon.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion.InsertionText">
      <summary>Gets the text that is to be inserted into the buffer if this completion is committed.</summary>
      <returns>The text to be inserted.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion.Properties">
      <summary>Gets the properties of the completion.</summary>
      <returns>
        <see cref="T:System.Data.PropertyCollection" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.Completion2">
      <summary>Adds an additional context icon to the completion. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion2.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion2" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion2.#ctor(System.String,System.String,System.String,System.Windows.Media.ImageSource,System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion2" />.</summary>
      <param name="displayText">The text that is to be displayed by an IntelliSense presenter.</param>
      <param name="insertionText">The text that is to be inserted into the buffer if this completion is committed.</param>
      <param name="description">A description that could be displayed with the display text of the completion.</param>
      <param name="iconSource">The icon to describe the completion item.</param>
      <param name="iconAutomationText">The automation name for the icon.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion2.#ctor(System.String,System.String,System.String,System.Windows.Media.ImageSource,System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.CompletionIcon})">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion2" /> with the specified text and icon.</summary>
      <param name="displayText">The text that is to be displayed by an IntelliSense presenter.</param>
      <param name="insertionText">The text that is to be inserted into the buffer if this completion is committed.</param>
      <param name="description">A description that could be displayed with the display text of the completion.</param>
      <param name="iconSource">The icon to describe the completion item.</param>
      <param name="iconAutomationText">The automation name for the icon.</param>
      <param name="attributeIcons">Additional icons shown to the right of the DisplayText.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion2.AttributeIcons"></member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.Completion3">
      <summary>Completion3 uses ImageMonikers instead of ImageSources to reference icons.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion3.#ctor">
      <summary>Initializes a new instance of &lt; Completion3.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion3.#ctor(System.String,System.String,System.String,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.String)">
      <summary>Initializes a new instance of &lt; Completion3 with the specified text and description.&lt;param name="displayText"&gt; &lt;/param&gt;        /// &lt;param name="insertionText"&gt; &lt;/param&gt;        /// &lt;param name="description"&gt; &lt;/param&gt;        /// &lt;param name="iconMoniker"&gt; &lt;/param&gt;        /// &lt;param name="iconAutomationText"&gt; &lt;/param&gt;</summary>
      <param name="displayText">The text that is to be displayed by an IntelliSense presenter.</param>
      <param name="insertionText">The text that is to be inserted into the buffer if this completion is committed.</param>
      <param name="description">A description that could be displayed with the display text of the completion.</param>
      <param name="iconMoniker">The icon to describe the completion item.</param>
      <param name="iconAutomationText">The automation name for the icon.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion3.#ctor(System.String,System.String,System.String,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.CompletionIcon2})">
      <summary>Initializes a new instance of Completion3 with the specified text, description, and icon.        /// &lt;/summary&gt;        /// &lt;param name="displayText"&gt; &lt;/param&gt;        /// &lt;param name="insertionText"&gt; &lt;/param&gt;        /// &lt;param name="description"&gt; &lt;/param&gt;        /// &lt;param name="iconMoniker"&gt; &lt;/param&gt;        /// &lt;param name="iconAutomationText"&gt; &lt;/param&gt;        /// &lt;param name="attributeIcons"&gt; &lt;/param&gt;</summary>
      <param name="displayText">The text that is to be displayed by an IntelliSense presenter.</param>
      <param name="insertionText">The text that is to be inserted into the buffer if this completion is committed.</param>
      <param name="description">A description that could be displayed with the display text of the completion.</param>
      <param name="iconMoniker">The icon to describe the completion item.</param>
      <param name="iconAutomationText">The automation name for the icon.</param>
      <param name="attributeIcons">Additional icons shown to the right of the DisplayText.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion3.IconMoniker">
      <summary>Gets or sets the moniker used to define a multi-resolution image.</summary>
      <returns>The moniker used to define a multi-resolution image.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion3.IconSource">
      <summary>This property is not supported by Completion3 and will always return null. To get the current icon use <see cref="P:Microsoft.VisualStudio.Language.Intellisense.Completion3.IconMoniker" />.</summary>
      <returns>Null.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon">
      <summary>Represents an icon used in the completion.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon.#ctor(System.Windows.Media.ImageSource,System.String,System.String,System.Int32)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon" />.</summary>
      <param name="imageSource">The icon to describe the completion item.</param>
      <param name="automationName">The automation name for the icon.</param>
      <param name="automationId">The automation id for the icon.</param>
      <param name="position">The display position of the icon. If no value is provided this will be zero.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon.AutomationId">
      <summary>Gets or sets the automation ID.</summary>
      <returns>The automation ID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon.AutomationName">
      <summary>Gets or sets the automation name.</summary>
      <returns>The automation name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon.CompareTo(Microsoft.VisualStudio.Language.Intellisense.CompletionIcon)">
      <summary>Compares the icon to another completion icon.</summary>
      <returns>true if the icons are the same, otherwise false.</returns>
      <param name="obj">The other completion icon.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon.IconSource">
      <summary>Gets or sets the icon source.</summary>
      <returns>The icon source.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon.Position">
      <summary>Gets or sets the position.</summary>
      <returns>The position.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon2">
      <summary>CompletionIcon2 uses ImageMonikers instead of mageSources to reference icons.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon2.#ctor">
      <summary>Initializes a new instance of &lt; CompletionIcon2.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon2.#ctor(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.String,System.String,System.Int32)">
      <summary>Initializes a new instance of CompletionIcon2 with the given image, automation values, and position.</summary>
      <param name="imageMoniker">The moniker for the icon that describes the completion item.</param>
      <param name="automationName">The automation name for the icon.</param>
      <param name="automationId">The automation id for the icon.</param>
      <param name="position">The display position of the icon. If no value is provided this will be zero.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon2.IconMoniker">
      <returns>Returns <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon2.IconSource">
      <returns>Returns <see cref="T:System.Windows.Media.ImageSource" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType">
      <summary>Defines the types of matching that can be done on completion items.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType.MatchDisplayText">
      <summary>Match the display text of the completion.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType.MatchInsertionText">
      <summary>Match the insertion text of the completion.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle">
      <summary>Defines a set of properties that will be used to style the default completion presenter.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.AreGradientsAllowed">
      <summary>Determines whether or not <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession" /> should use gradients.</summary>
      <returns>A nullable boolean, true if gradients are allowed, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.BackgroundBrush">
      <summary>Gets a brush that is used to paint the background of the completion presenter.</summary>
      <returns>
        <see cref="T:System.Windows.Media.Brush" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.BitmapScalingMode">
      <summary>Gets the desired scaling mode for images.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.BorderBrush">
      <summary>Gets a brush that is used to paint the borders in the completion presenter.</summary>
      <returns>
        <see cref="T:System.Windows.Media.Brush" />
      </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.CompletionTextRunProperties">
      <summary>Gets the text run properties that are used to format the text of the individual completion items.</summary>
      <returns>
        <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.SelectionBackgroundBrush">
      <summary>Gets a brush that is used to paint the background of the selected completion item.</summary>
      <returns>
        <see cref="T:System.Windows.Media.Brush" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.SelectionBorderBrush">
      <summary>Gets a brush that is used to paint the border rectangle around the selected completion item.</summary>
      <returns>
        <see cref="T:System.Windows.Media.Brush" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.SelectionTextRunProperties">
      <summary>Gets text run properties that are used to paint the text of the selected completion item.</summary>
      <returns>
        <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.TabItemHotBackgroundBrush">
      <summary>Gets a brush that is used to paint the background of a completion tab item when the mouse is hovering over it.</summary>
      <returns>
        <see cref="T:System.Windows.Media.Brush" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.TabItemHotBorderBrush">
      <summary>Gets a brush that is used to paint the border of a completion tab item when the mouse is hovering over it.</summary>
      <returns>
        <see cref="T:System.Windows.Media.Brush" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.TabItemHotTextRunProperties">
      <summary>Gets the text run properties that are used to format the text of a completion tab item when the mouse is hovering over it.</summary>
      <returns>
        <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.TabPanelBackgroundBrush">
      <summary>Gets a brush that is used to paint the background of the completion tab panel.</summary>
      <returns>
        <see cref="T:System.Windows.Media.Brush" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.TooltipBackgroundBrush">
      <summary>Gets a brush that is used to paint the background of the completion tooltip.</summary>
      <returns>
        <see cref="T:System.Windows.Media.Brush" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.TooltipBorderBrush">
      <summary>Gets a brush that is used to paint the border around the completion tooltip.</summary>
      <returns>
        <see cref="T:System.Windows.Media.Brush" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.TooltipTextRunProperties">
      <summary>Gets text run properties that are used to format the text in the completion tooltip.</summary>
      <returns>
        <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus">
      <summary>Represents the full selection status of a completion set.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.#ctor(Microsoft.VisualStudio.Language.Intellisense.Completion,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus" />.</summary>
      <param name="completion">The selected <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion" /> in this selection status.</param>
      <param name="isSelected">true if the completion is fully-selected, false otherwise.</param>
      <param name="isUnique">true if the completion is a unique match, false otherwise.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.Completion">
      <summary>Gets the selected completion represented by this selection status instance.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.Equals(System.Object)">
      <summary>Determines whether two instances of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus" /> are the same.</summary>
      <returns>true if the objects are the same, otherwise false.</returns>
      <param name="obj">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus" /> to which to compare it.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.GetHashCode">
      <summary>Gets the hash code of this instance.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.IsSelected">
      <summary>Determines whether the completion is fully selected.</summary>
      <returns>true if the completion is selected, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.IsUnique">
      <summary>Determines whether the completion is a unique match.</summary>
      <returns>true if the completion is unique, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.op_Equality(Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus,Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus)">
      <summary>Determines whether two instances of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus" /> are the same.</summary>
      <returns>true if the instances are the same, otherwise false.</returns>
      <param name="status1">The first instance.</param>
      <param name="status2">The second instance.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.op_Inequality(Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus,Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus)">
      <summary>Determines whether two instances of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus" /> are different.</summary>
      <returns>true if the instances are different, otherwise false.</returns>
      <param name="status1">The first instance.</param>
      <param name="status2">The second instance.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet">
      <summary>Represents a set of completions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.#ctor(System.String,System.String,Microsoft.VisualStudio.Text.ITrackingSpan,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.Completion},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.Completion})">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet" /> with the specified name and text.</summary>
      <param name="moniker">The unique, non-localized identifier for the completion set.</param>
      <param name="displayName">The localized name of the completion set.</param>
      <param name="applicableTo">The tracking span to which the completions apply.</param>
      <param name="completions">The list of completions.</param>
      <param name="completionBuilders">The list of completion builders.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.ApplicableTo">
      <summary>Gets or sets the text tracking span to which this completion applies.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.CompletionBuilders">
      <summary>Gets or sets the list of completion builders that are part of this completion set.</summary>
      <returns>A list of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion" /> objects.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.Completions">
      <summary>Gets or sets the list of completions that are part of this completion set.</summary>
      <returns>A list of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion" /> objects.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.DisplayName">
      <summary>Gets or sets the localized name of this completion set.</summary>
      <returns>The localized name of this completion set.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.Filter">
      <summary>Restricts the set of completions to those that match the applicability text of the completion set, and then determines the best match.</summary>
      <exception cref="T:System.InvalidOperationException">Both the completions and the completion builders have been overridden.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.Filter(Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType,System.Boolean)">
      <summary>Restricts the set of completions to those that match the applicability text of the completion set, and then determines the best match.</summary>
      <param name="matchType">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType" />.</param>
      <param name="caseSensitive">true if the match is case-sensitive, otherwise false.</param>
      <exception cref="T:System.InvalidOperationException">Both the completions and the completion builders have been overridden.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.MatchCompletionList(System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.Completion},Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType,System.Boolean)">
      <summary>Matches the completion list.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus" />.</returns>
      <param name="completionList">The list of completions.</param>
      <param name="matchType">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType" />.</param>
      <param name="caseSensitive">true if the match is case-sensitive, otherwise false.</param>
      <exception cref="T:System.InvalidOperationException">The span to which this completion applies is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.Moniker">
      <summary>Gets the unique, non-localized identifier for the completion set.</summary>
      <returns>The unique, non-localized identifier for the completion set.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.Recalculate">
      <summary>Recalculates the set of completions for this completion set.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.SelectBestMatch">
      <summary>Determines the best match in the completion set.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.SelectBestMatch(Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType,System.Boolean)">
      <summary>Determines the best match in the completion set for the given match type.</summary>
      <param name="matchType">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType" />.</param>
      <param name="caseSensitive">true if the match is case-sensitive, otherwise false.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.SelectionStatus">
      <summary>Gets or sets the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus" />.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus" />.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
      <exception cref="T:System.ArgumentException">The completion belonging to the value is not contained in either the completions or the completion builders.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.SelectionStatusChanged">
      <summary>Raised when the selection status has changed.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.WritableCompletionBuilders">
      <summary>Gets the collection of writable completion builders.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ObservableCollection`1" /> of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion" /> objects.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.WritableCompletions">
      <summary>Gets the collection of writable completions.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1" /> of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion" /> objects.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.CompletionMatchResult">
      <summary>Stores information about the completion match result.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.CompletionMatchResult.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.CompletionMatchResult" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.CompletionMatchResult.CharsMatchedCount">
      <summary>Gets or sets the number of characters matched in the completion set.</summary>
      <returns>The number of characters matched in the completion set.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.CompletionMatchResult.SelectionStatus">
      <summary>Gets or sets the selection status of the completion set.</summary>
      <returns>The selection status of the completion set.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.CurrentParameterChangedEventArgs">
      <summary>Provides information about the change of the current parameter in a signature help session.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.CurrentParameterChangedEventArgs.#ctor(Microsoft.VisualStudio.Language.Intellisense.IParameter,Microsoft.VisualStudio.Language.Intellisense.IParameter)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CurrentParameterChangedEventArgs" />.</summary>
      <param name="previousCurrentParameter">The parameter that was previously the current parameter.</param>
      <param name="newCurrentParameter">The parameter that is now the current parameter.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CurrentParameterChangedEventArgs.NewCurrentParameter">
      <summary>Gets the parameter that is now the current parameter.</summary>
      <returns>The new current parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.CurrentParameterChangedEventArgs.PreviousCurrentParameter">
      <summary>Gets the parameter that was previously the current parameter.</summary>
      <returns>The previous current parameter.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ExceptionEventArgs">
      <summary>Provides error exception data for an event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ExceptionEventArgs.#ctor(System.Exception)">
      <summary>Creates new instance of ExceptionEventArgs.</summary>
      <param name="e">The exception that details the cause of the failure.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ExceptionEventArgs.Exception">
      <summary>Gets the exception that details the cause of the failure.</summary>
      <returns>Returns <see cref="T:System.Exception" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1">
      <summary>Represents a filtered observable collection.</summary>
      <typeparam name="T">The type of the collection.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1" />.</summary>
      <param name="underlyingList">The underlying collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="underlyingList" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="underlyingList" /> does not implement <see cref="T:System.Collections.IList" /> and/or <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.Add(System.Object)">
      <summary>Since this collection is read-only, throws an <see cref="T:System.InvalidOperationException" />.</summary>
      <returns>The number of items.</returns>
      <param name="value">The value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.Add(`0)">
      <summary>Since this collection is read-only, throws an <see cref="T:System.InvalidOperationException" />.</summary>
      <param name="item">The item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.Clear">
      <summary>Since this collection is read-only, throws an <see cref="T:System.InvalidOperationException" />.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.CollectionChanged">
      <summary>Raised when the collection has changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.Contains(System.Object)">
      <summary>Determines whether the collection contains the specified object.</summary>
      <returns>true if the collection contains the item, otherwise false.</returns>
      <param name="value">The object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.Contains(`0)">
      <summary>Determines whether the collection contains the specified item.</summary>
      <returns>true if the item is in the collection, otherwise false.</returns>
      <param name="item">The item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.CopyTo(System.Array,System.Int32)">
      <summary>Since this collection is read-only, throws an <see cref="T:System.InvalidOperationException" />.</summary>
      <param name="array">The array.</param>
      <param name="index">The array index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Since this collection is read-only, throws an <see cref="T:System.InvalidOperationException" />.</summary>
      <param name="array">The array.</param>
      <param name="arrayIndex">The array index.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.Count">
      <summary>Gets the number of items in the collection.</summary>
      <returns>The number of items in the collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.Filter(System.Predicate{`0})">
      <summary>Filters the collection by the specified predicate.</summary>
      <param name="filterPredicate">A <see cref="T:System.Predicate`1" /> that defines the filter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.GetEnumerator">
      <summary>Gets the enumerator.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.IndexOf(System.Object)">
      <summary>Gets the location of the specified item.</summary>
      <returns>The location of the specified item.</returns>
      <param name="value">The value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.IndexOf(`0)">
      <summary>Gets the location of the specified item.</summary>
      <returns>The location of the specified item.</returns>
      <param name="item">The item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.Insert(System.Int32,System.Object)">
      <summary>Since this collection is read-only, throws an <see cref="T:System.InvalidOperationException" />.</summary>
      <param name="index">The location.</param>
      <param name="value">The item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.Insert(System.Int32,`0)">
      <summary>Since this collection is read-only, throws an <see cref="T:System.InvalidOperationException" />.</summary>
      <param name="index">The location.</param>
      <param name="item">The item.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.IsFixedSize">
      <summary>Determines whether this collection has a fixed size.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.IsReadOnly">
      <summary>Determines whether this collection is read-only.</summary>
      <returns>Always returns true.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.IsSynchronized">
      <summary>Determines whether the collection is synchronized.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.Item(System.Int32)">
      <summary>Gets the item at the specified location.</summary>
      <param name="index">The location</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.Remove(System.Object)">
      <summary>Since this collection is read-only, throws an <see cref="T:System.InvalidOperationException" />.</summary>
      <param name="value">The item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.Remove(`0)">
      <summary>Since this collection is read-only, throws an <see cref="T:System.InvalidOperationException" />.</summary>
      <returns>true if the item was successfully removed, otherwise false.</returns>
      <param name="item">The item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.RemoveAt(System.Int32)">
      <summary>Since this collection is read-only, throws an <see cref="T:System.InvalidOperationException" />.</summary>
      <param name="index">The index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.StopFiltering">
      <summary>Removes the filter for the collection.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.SyncRoot">
      <summary>Gets the object used to synchronize the collection.</summary>
      <returns>The object used to synchronize the collection</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gets the enumerator.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets the item at the specified location.</summary>
      <returns>The item at the specified location.</returns>
      <param name="index">The location.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker">
      <summary>Represents the central broker responsible for statement completion.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker.CreateCompletionSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.Boolean)">
      <summary>Creates a completion session, but does not start it.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession" />.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to create a completion session.</param>
      <param name="triggerPoint">The <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" /> in the text buffer at which statement completion is requested.</param>
      <param name="trackCaret">true if this session should track the caret, false otherwise. When the caret is tracked, only the completion items whose applicability span contains the caret will be displayed. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker.DismissAllSessions(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Dismisses all active statement completion sessions.</summary>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to dismiss all sessions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker.GetSessions(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Gets the list of active statement completion sessions.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession" />.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which to get completions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker.IsCompletionActive(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Determines whether or not statement completion is active over the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
      <returns>true when Sessions.Count &gt; 0 and false otherwise.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which to determine if statement completion is active.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker.TriggerCompletion(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Starts the process of statement completion, assuming the caret position to be the position at which completions should be inserted.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IStatementCompletionSession" />. This may be null if no session could be created.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to trigger statement completion.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker.TriggerCompletion(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.Boolean)">
      <summary>Starts the process of statement completion at the specified position. </summary>
      <returns>A valid <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IStatementCompletionSession" />. This may be null if no session could be created.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to trigger statement completion.</param>
      <param name="triggerPoint">The point in the text buffer at which statement completion is requested.</param>
      <param name="trackCaret">true if this session should track the caret, false otherwise. When the caret is tracked, only completion items whose applicability span contains the caret will be displayed. </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession">
      <summary>Represents a statement completion session, which is a type of IntelliSense session.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.Commit">
      <summary>Commits a completion session. The selected completion's insertion text is inserted into the buffer in the place of its applicability span.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.Committed">
      <summary>Raised after a completion session is committed.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.CompletionSets">
      <summary>Gets the collection of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet" /> objects.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet" /> objects.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.Filter">
      <summary>Filters the session's completion items, based on the current state of the text buffer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.IsStarted">
      <summary>Determines whether the completion session has been started.</summary>
      <returns>true if the completion session has been started, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.SelectedCompletionSet">
      <summary>Gets or sets the selected <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet" />.</summary>
      <returns>The selected <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet" />.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.SelectedCompletionSetChanged">
      <summary>Raised when the <see cref="P:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.SelectedCompletionSet" /> property changes.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSource">
      <summary>Provides completions for a given content type.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionSource.AugmentCompletionSession(Microsoft.VisualStudio.Language.Intellisense.ICompletionSession,System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.CompletionSet})">
      <summary>Determines which <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet" />s should be part of the specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession" />.</summary>
      <param name="session">The session for which completions are to be computed.</param>
      <param name="completionSets">The set of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet" /> objects to be added to the session.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSourceProvider">
      <summary>Provides completion sources.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionSourceProvider.TryCreateCompletionSource(Microsoft.VisualStudio.Text.ITextBuffer)">
      <summary>Creates a completion provider for the given context.</summary>
      <returns>A valid <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSource" /> instance, or null if none could be created.</returns>
      <param name="textBuffer">The text buffer over which to create a provider.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IconDescription">
      <summary>Describes the icon to use for displaying items in statement completion.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IconDescription.#ctor(Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup,Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem)">
      <summary>Initializes a new instance of an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IconDescription" /> from a group and an item within the group.</summary>
      <param name="group">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup" /> of the icon to be displayed.</param>
      <param name="item">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem" /> within the icon group to be displayed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IconDescription.Group">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup" /> of the icon to be displayed.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup" /> of the icon.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IconDescription.Item">
      <summary>Gets the specific <see cref="T:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem" /> within the icon group to be displayed.</summary>
      <returns>The specific <see cref="T:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IconDescription.ToString">
      <summary>Provides a description of the specific icon.</summary>
      <returns>The string.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICustomCommit">
      <summary>Provides custom commit operations for completions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICustomCommit.Commit">
      <summary>Commits the completion using the completion's own commit logic.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICustomIntellisensePresenter">
      <summary>Defines a custom IntelliSense presenter.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICustomIntellisensePresenter.Render">
      <summary>Renders the IntelliSense session.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICustomKeyboardHandler">
      <summary>Defines a custom handler of keyboard events</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICustomKeyboardHandler.CaptureKeyboard">
      <summary>Notifies the handler that it may start capturing keyboard events.</summary>
      <returns>true if the handler can start capturing keyboard events, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICustomKeyboardHandler.ReleaseKeyboard">
      <summary>Notifies the handler that it should stop capturing keyboard events.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IDesiredHeightProvider">
      <summary>Indicates that an implementing object wishes to provide its height to a container.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IDesiredHeightProvider.DesiredHeight">
      <summary>Gets the desired height in pixels.</summary>
      <returns>The desired height in pixels.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.IDesiredHeightProvider.DesiredHeightChanged">
      <summary>Raised when the container should requery DesiredHeight.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult">
      <summary>Represents an IPeekResult that is based on a location in a document.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult.DesiredEditorGuid">
      <summary>Gets the GUID for the desired editor to open when navigating.</summary>
      <returns>The GUID for the desired editor to open when navigating.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult.DisplayInfo2">
      <summary>Gets the new display info so we can use the token span to give users more indication on the symbol they are looking for.</summary>
      <returns>Returns <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo2" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult.FilePath">
      <summary>Gets the fully qualified file path identifying the document where the result is located.</summary>
      <returns>The fully qualified file path identifying the document where the result is located.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult.IdentifyingSpan">
      <summary>Gets a IPersistentSpan corresponding to the span of the identifying token inside the result location span. For example, if this result corresponds to a method, the identifying span is the span of the method name token inside method definition span.</summary>
      <returns>The IPersistentSpan corresponding to the span of an identifying token inside the result location span.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult.Image">
      <summary>Gets an ImageMoniker so we can display an image equivalent for the IDocumentPeekResult.</summary>
      <returns>Returns <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult.IsReadOnly">
      <summary>Determines whether this result is read-only.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult.Span">
      <summary>Gets a IPersistentSpan corresponding to the result location span. For example if this result corresponds to a method, this span is the span of the method definition.</summary>
      <returns>The IPersistentSpan corresponding to the result location span</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResultScrollState">
      <summary>Extends the capability of the IPeekResultScrollState to be able to scroll and zoom any text view, rather than only the currently visible presentation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResultScrollState.RestoreScrollState(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Scrolls any text view to the the IPeekResultScrollState that this inherits from.</summary>
      <param name="presentation">TextView to scroll.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResultScrollState.RestoreZoomState(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Restores zoom level in given text view.</summary>
      <param name="textView">TextView to restore zoom level in.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IExternallyBrowsablePeekResult">
      <summary>Represents an IPeekResult that is not based on a location in a document, but can be browsed externally, for example a metadata class that can only be browsed in Object Browser.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IFindPeekResultsCallback">
      <summary>Represents a callback object provided to IPeekResultSource objects to report the state of result querying.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IFindPeekResultsCallback.ReportFailure(System.Exception)">
      <summary>Reports a failure of query processing.</summary>
      <param name="failure">The exception representing the details of the failure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IFindPeekResultsCallback.ReportProgress(System.Int32)">
      <summary>Represents a callback object provided to IPeekResultSource objects to report the state of result querying.</summary>
      <param name="percentProgress">The percentage, from 0 to 100, of a work completion.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IFocusableIntellisensePresenter">
      <summary>Defines a focusable presenter of IntelliSense information.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IFocusableIntellisensePresenter.Focus">
      <summary>Sets focus within the presentation that this presenter is rendering.</summary>
      <returns>True if focus set successfully, false otherwise.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IGlyphService">
      <summary>Gets a standard set of glyphs.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IGlyphService.GetGlyph(Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup,Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem)">
      <summary>Gets a glyph in the form of a WPF <see cref="T:System.Windows.Media.ImageSource" />.</summary>
      <returns>A valid WPF <see cref="T:System.Windows.Media.ImageSource" /> that contains the requested glyph.</returns>
      <param name="group">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup" /> for this glyph.</param>
      <param name="item">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem" /> for this glyph.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseCommandTarget">
      <summary>Provides a way to intercede in the command-handling chain to handle keyboard commands.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseCommandTarget.ExecuteKeyboardCommand(Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand)">
      <summary>Executes a user-initiated keyboard command.</summary>
      <returns>true if the command was handled, false otherwise.</returns>
      <param name="command">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand" /> to execute.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseController">
      <summary>Controls the IntelliSense process for one or more subject <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> objects exposed through a single <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseController.ConnectSubjectBuffer(Microsoft.VisualStudio.Text.ITextBuffer)">
      <summary>Called when a new subject <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> appears in the graph of buffers associated with the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />, due to a change in projection or content type.</summary>
      <param name="subjectBuffer">The newly-connected text buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseController.Detach(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Detaches the controller from the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> from which the controller should detach.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseController.DisconnectSubjectBuffer(Microsoft.VisualStudio.Text.ITextBuffer)">
      <summary>Called when a subject <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> is removed from the graph of buffers associated with the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />, due to a change in projection or content type.</summary>
      <param name="subjectBuffer">The disconnected text buffer.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseControllerProvider">
      <summary>Creates IntelliSense controllers for a specific <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseControllerProvider.TryCreateIntellisenseController(Microsoft.VisualStudio.Text.Editor.ITextView,System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITextBuffer})">
      <summary>Attempts to create an IntelliSense controller for a specific text view.</summary>
      <returns>A valid IntelliSense controller, or null if none could be created.</returns>
      <param name="textView">The text view for which a controller should be created.</param>
      <param name="subjectBuffers">The set of text buffers with matching content types that are potentially visible in the view.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisensePresenter">
      <summary>Defines a presenter of IntelliSense information.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisensePresenter.Session">
      <summary>Gets the session that this presenter is rendering.</summary>
      <returns>The session.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisensePresenterProvider">
      <summary>Creates IntelliSense presenters over a given IntelliSense session.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisensePresenterProvider.TryCreateIntellisensePresenter(Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession)">
      <summary>Attempts to create an IntelliSense presenter for a given IntelliSense session.</summary>
      <returns>A valid IntelliSense presenter, or null if none could be created.</returns>
      <param name="session">The session for which a presenter should be created.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession">
      <summary>Represents an IntelliSense session, or a single instance of the IntelliSense process.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Collapse">
      <summary>Reduces the session to a minimized state. If the session has no such state, the session will be dismissed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Dismiss">
      <summary>Dismisses the session, causing the presenter to be destroyed and the session to be removed from the session stack.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Dismissed">
      <summary>Occurs when the session is dismissed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.GetTriggerPoint(Microsoft.VisualStudio.Text.ITextBuffer)">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" /> at which this IntelliSense session was triggered for the specified <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" />.</returns>
      <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> for which a trigger point should be returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.GetTriggerPoint(Microsoft.VisualStudio.Text.ITextSnapshot)">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> at which this IntelliSense session was triggered in terms of the specified <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" />.</summary>
      <returns>A nullable <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" />.</returns>
      <param name="textSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.IsDismissed">
      <summary>Determines whether the session is dismissed.</summary>
      <returns>true if the session is dismissed, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Match">
      <summary>Determines the best matching item in the session and sets the selection to this item.</summary>
      <returns>true if the match was found, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Presenter">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisensePresenter" /> that is used to render IntelliSense for this session.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisensePresenter" />.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.PresenterChanged">
      <summary>Occurs when the IntelliSense presenter for this session changes.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Recalculate">
      <summary>Recalculates the underlying IntelliSense items pertaining to this session, using the same trigger point.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Recalculated">
      <summary>Occurs when the session is recalculated.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Start">
      <summary>Starts the session.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.TextView">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> in which this IntelliSense session was triggered.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack">
      <summary>Represents a stack of IntelliSense sessions. The stack manages session activation and currency.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack.CollapseAllSessions">
      <summary>Reduces all sessions in the session stack to their collapsed (or minimized) state, or dismisses them if they have no such state.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack.MoveSessionToTop(Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession)">
      <summary>Moves a session already in the session stack to the top of the stack. </summary>
      <param name="session">The session to move.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack.PopSession">
      <summary>Removes the topmost session from the stack and returns it.</summary>
      <returns>The session that was removed.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack.PushSession(Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession)">
      <summary>Adds a session to the top of the stack.</summary>
      <param name="session">An <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession" /> to add to the top of the stack.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack.Sessions">
      <summary>Gets the list of sessions in the stack, ordered from bottom to top.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession" /> objects.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack.TopSession">
      <summary>Gets the topmost session in the stack.</summary>
      <returns>The topmost session.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStackMapService">
      <summary>Provides access to all the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack" /> objects created for all the different <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> instances in the application.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStackMapService.GetStackForTextView(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Gets an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack" /> for a specific <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> instance.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack" />.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IInteractiveQuickInfoContent">
      <summary>Represents an interactive Quick Info content. If any object implementing this interface is provided by IQuickInfoSource via <see cref="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSource.AugmentQuickInfoSession(Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession,System.Collections.Generic.IList{System.Object},Microsoft.VisualStudio.Text.ITrackingSpan@)" />, the Quick Info presenter will allow it to interact with IQuickInfoSession for this content. For example, a Quick Info tooltip will stay open when the mouse is over it.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IInteractiveQuickInfoContent.IsMouseOverAggregated">
      <summary>Determines whether the mouse pointer is located over this interactive Quick Info content, including any parts that are out of the Quick Info visual tree (such as popups).</summary>
      <returns>True if the mouse is over the Quick Info content, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IInteractiveQuickInfoContent.KeepQuickInfoOpen">
      <summary>Determines whether the interactive Quick Info content wants to keep current Quick Info session open. Until this property is true, the IQuickInfoSession containing this content won't be dismissed even if mouse is moved somewhere else. This is useful in very rare scenarios when an interactive Quick Info content handles all input interaction, while needs to keep this IQuickInfoSession open (the only known example so far is LightBulb in its expanded state hosted in Quick Info).</summary>
      <returns>True if QuickInfo content should keep the session open.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker">
      <summary>Represents a LightBulb broker, which is globally responsible for managing ILightBulbSessions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.CanCreateSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Determines whether an ILightBulbSession can be created for a given ITextView with the current caret position as a trigger point.</summary>
      <returns>True if a session can be created, false otherwise.</returns>
      <param name="requestedActionCategories">A set of suggested action categories.</param>
      <param name="textView">The ITextView over which to determine if an ILightBulbSession can be created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.CanCreateSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint)">
      <summary>Determines whether an ILightBulbSession can be created for a given ITextView at a given trigger point.</summary>
      <returns>True if a session can be created, false otherwise.</returns>
      <param name="requestedActionCategories">A set of suggested action categories.</param>
      <param name="textView">The ITextView over which to determine if an ILightBulbSession can be created.</param>
      <param name="triggerPoint">The ITrackingPoint&gt; in the text buffer at which to determine if an ILightBulbSession can be created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.CreateSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Creates, but doesn't expand an ILightBulbSession for a given ITextView. </summary>
      <returns>A valid instance of ILightBulbSession, or null if no ILightBulbSession can be created for the given text view.</returns>
      <param name="requestedActionCategories">A set of suggested action categories.</param>
      <param name="textView">The ITextView over which to create an ILightBulbSession.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.CreateSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,Microsoft.VisualStudio.Text.ITrackingSpan,System.Boolean)">
      <summary>Creates but doesn't expand an ILightBulbSession for a given ITextView with the current caret position as a trigger point.</summary>
      <returns>A valid instance of an ILightBulbSession, or null if no ILightBulbSession can be created for a given text view and caret position.</returns>
      <param name="requestedActionCategories">A set of suggested action categories.</param>
      <param name="textView">The ITextView over which to create an ILightBulbSession.</param>
      <param name="triggerPoint">The ITrackingPoint in the text buffer at which to create an ILightBulbSession.</param>
      <param name="triggerSpan">The ITrackingSpan in the text buffer for which to create an ILightBulbSession.</param>
      <param name="trackMouse">Determines whether the session should track the mouse.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.DismissSession(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Dismisses an active &lt; ILightBulbSession for the specified ITextView.</summary>
      <param name="textView">The text view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.GetSession(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Gets the active ILightBulbSession for the specified ITextView.</summary>
      <returns>The valid active &lt;see cref="ILightBulbSession"/&gt; for the given &lt;see cref="ITextView"/&gt; or null if it doesn't exist.</returns>
      <param name="textView">The ITextView for which to get an ILightBulbSession.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.GetSuggestedActionsSources(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
      <summary>Gets a list of ISuggestedActionsSources for given ITextView and ITextBuffer.</summary>
      <returns>A list of ISuggestedActionsSources for the specified ITextView and ITextBuffer, or null if no ISuggestedActionsSourc&gt;s support the specified ITextView and ITextBuffer.</returns>
      <param name="textView">The ITextView for which to get the list of ISuggestedActionsSources.</param>
      <param name="buffer">The ITextBuffer for which to get the list of ISuggestedActionsSources.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.HasSuggestedActionsAsync(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,Microsoft.VisualStudio.Text.ITrackingSpan,System.Threading.CancellationToken)"></member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.HasSuggestedActionsAsync(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView,System.Threading.CancellationToken)"></member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.IsLightBulbSessionActive(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Determines whether or not an &lt; ILightBulbSession is active over the specified ITextView.</summary>
      <returns>True if an active ILightBulbSession exists for the given ITextView, false otherwise.</returns>
      <param name="textView">The &lt; ITextView for which to determine if an ILightBulbSession is active.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.IsSupportedContentType(Microsoft.VisualStudio.Utilities.IContentType)">
      <summary>Determines whether there is at least one ISuggestedActionsSourceProvider that supports the given content type.</summary>
      <returns>True if there is at least one ISuggestedActionsSourceProvider supporting given content type, false otherwise.</returns>
      <param name="contentType">The content type to check if there is at least one ISuggestedActionsSourceProvider that supports it.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.TryExpandSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Tries to create and expand an ILightBulbSession for the specified ITextView.</summary>
      <returns>True if an ILightBulbSession was successfully created and expanded, false otherwise.</returns>
      <param name="requestedActionCategories">A set of suggested action categories.</param>
      <param name="textView">The ITextView for which to create and expand an ILightBulbSession.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.TryExpandSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,Microsoft.VisualStudio.Text.ITrackingSpan,System.Boolean)">
      <summary>Tries to create and expand ILightBulbSession for the specified ITextView.</summary>
      <returns>trueif ILightBulbSession was successfully created and expanded, false otherwise.<see cref="T:System.Boolean" />.</returns>
      <param name="requestedActionCategories">A set of suggested action categories requested.</param>
      <param name="textView">The ITextView for which to create and expand an ILightBulbSession.</param>
      <param name="triggerPoint">The ITrackingPoint in the text buffer at which to create an ILightBulbSession.</param>
      <param name="triggerSpan">The ITrackingSpan in the text buffer for which to create an ILightBulbSession.</param>
      <param name="trackMouse">Determines whether the session should track the mouse.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession">
      <summary>Defines a LightBulb session, which encapsulates all the information about a particular LightBulb instance.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.ActionCategories">
      <summary>Gets the set of suggested action categories this session was requested to provide.</summary>
      <returns>The set of suggested action categories this session was requested to provide.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.ApplicableToSpan">
      <summary>Gets the visual span to which this session is applicable in the text buffer. This is used to position the LightBulb presentation that is rendered by light bulb presenters.</summary>
      <returns>The visual span to which this session is applicable in the text buffer.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.Collapsed">
      <summary>Fires when the session is collapsed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.Expand">
      <summary>Expands the session.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.Expanded">
      <summary>Fires when the session is expanded.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.IsCollapsed">
      <summary>Determines whether the session is in the collapsed state.</summary>
      <returns>True if the session is in the collapsed state, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.IsExpanded">
      <summary>Determines whether the session is in the expanded state.</summary>
      <returns>True if the session is in the expanded state, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.Reset">
      <summary>Resets the session content.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.TrackMouse">
      <summary>Determines whether this session is tracking the mouse.  </summary>
      <returns>True if this session is tracking the mouse, otherwise false.  </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.TryGetSuggestedActionSets(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet}@)">
      <summary>Tries to get the list of ISuggestedActions (grouped into SuggestedActionSets) that this session displays.</summary>
      <returns>A QuerySuggestedActionCompletionStatus that indicates whether the operation completed successfully or was canceled.</returns>
      <param name="actionSets">The list of SuggestedActionSets.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand">
      <summary>Represents the set of keyboard commands that can be issued to IntelliSense presenters.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.BottomLine">
      <summary>The go to the bottom line command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.DecreaseFilterLevel">
      <summary>The decrease filter level command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.Down">
      <summary>The down arrow command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.End">
      <summary>The end command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.Enter">
      <summary>The enter, or return, command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.Escape">
      <summary>The escape command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.Home">
      <summary>The home command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.IncreaseFilterLevel">
      <summary>The increase filter level command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.PageDown">
      <summary>The page down command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.PageUp">
      <summary>The page up command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.TopLine">
      <summary>The go to the top line command</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.Up">
      <summary>The up arrow command.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IntellisenseSpaceReservationManagerNames">
      <summary>Defines the names of the space reservation managers used by the default IntelliSense presenters.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseSpaceReservationManagerNames.CompletionSpaceReservationManagerName">
      <summary>The space reservation manager name for statement completion.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseSpaceReservationManagerNames.QuickInfoSpaceReservationManagerName">
      <summary>The space reservation manager name for Quick Info.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseSpaceReservationManagerNames.SignatureHelpSpaceReservationManagerName">
      <summary>The space reservation manager name for signature help (parameter info).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseSpaceReservationManagerNames.SmartTagSpaceReservationManagerName">
      <summary>The space reservation manager name for smart tags.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IParameter">
      <summary>Represents an individual parameter description inside the description of a signature for Signature Help (Parameter Info).</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IParameter.Documentation">
      <summary>Gets the documentation associated with the parameter.</summary>
      <returns>The documentation.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IParameter.Locus">
      <summary>Gets the location of this parameter relative to the signature's content.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Span" /> of this parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IParameter.Name">
      <summary>Gets the name of this parameter.</summary>
      <returns>The name.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IParameter.PrettyPrintedLocus">
      <summary>Gets the text location of this parameter relative to the signature's pretty-printed content.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Span" /> of this parameter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IParameter.Signature">
      <summary>Gets the signature of which this parameter is a part.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignature" /> of the parameter.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem">
      <summary>Represents an object (for instance a symbol in a document) that can be a source of a IPeekSession.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem.DisplayName">
      <summary>Gets the localized string used for displaying this item to the user.</summary>
      <returns>The localized string used for displaying this item to the user.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem.GetOrCreateResultSource(System.String)">
      <summary>Gets or creates an IPeekResultSource instance representing a source of results of querying this IPeekableItem for the given relationship.</summary>
      <returns> A valid IPeekResultSource instance, or null if this instance cannot provide results for the given relationship.</returns>
      <param name="relationshipName">The case insenitive name of the relationship to be queried for results.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem.Relationships">
      <summary>Gets an enumeration of all the relationships supported by this instance.</summary>
      <returns>All the relationships supported by this instance.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSource">
      <summary>Provides IPeekableItems for a given content type.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSource.AugmentPeekSession(Microsoft.VisualStudio.Language.Intellisense.IPeekSession,System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.IPeekableItem})">
      <summary>Determines which IPeekableItems should be part of the specified IPeekSession.</summary>
      <param name="session">The session for which IPeekableItems are to be computed.</param>
      <param name="peekableItems">The list of IPeekableItems to be added to the session.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSourceProvider">
      <summary>Provides &lt;see cref="IPeekableItem"/&gt; source for a text buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSourceProvider.TryCreatePeekableItemSource(Microsoft.VisualStudio.Text.ITextBuffer)">
      <returns>Returns <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSource" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker">
      <summary>Represents a Peek broker, which is globally responsible for managing IPeekSessions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.CanTriggerPeekSession(Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions,System.Predicate{System.String})">
      <summary>Determines whether a Peek session can be triggered at the caret position, without actually triggering it. Note that an ability to trigger a Peek session doesn't mean that when triggered the session will necessarily provide results.</summary>
      <returns>True if a Peek session can be triggered at the caret position, false otherwise.</returns>
      <param name="options">The options needed to create a Peek session.</param>
      <param name="isStandaloneFilePredicate">A predicate used to determine whether given file is a standalone (not part of a project) file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.CanTriggerPeekSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.String,System.Predicate{System.String})">
      <summary>Determines whether a Peek session can be triggered at the caret position, without actually triggering it. Note that an ability to trigger a Peek session doesn't mean that when triggered the session will necessarily provide results.</summary>
      <returns>True if a Peek session can be triggered at the caret position, false otherwise.</returns>
      <param name="textView">The ITextView over which to check if a Peek session can be triggered.</param>
      <param name="triggerPoint">The point in the text buffer at which a Peek session is requested.</param>
      <param name="relationshipName">The name of the requested relationship to be explored by a Peek session.</param>
      <param name="isStandaloneFilePredicate">A predicate used to determine whether given file is a standalone (not part of a project) file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.CanTriggerPeekSession(Microsoft.VisualStudio.Text.Editor.ITextView,System.String,System.Predicate{System.String})">
      <summary>Determines whether a Peek session can be triggered at the caret position, without actually triggering it. Note that an ability to trigger a Peek session doesn't mean that when triggered the session will necessarily provide results.</summary>
      <returns>True if a Peek session can be triggered at the caret position, false otherwise.</returns>
      <param name="textView">The ITextView over which to check if a Peek session can be triggered.</param>
      <param name="relationshipName">The name of the requested relationship to be explored by a Peek session.</param>
      <param name="isStandaloneFilePredicate">A predicate used to determine whether given file is a standalone (not part of a project) file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.CreatePeekSession(Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions)">
      <summary>Creates, but does not start a Peek session at a particular position, which is assumed to be the position of a peekable symbol on which a Peek session is requested.</summary>
      <returns>&gt;A valid Peek session. May be null if no session could be created at the trigger point for the given relationship.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.CreatePeekSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.String)">
      <summary>Creates, but does not start a Peek session at a particular position, which is assumed to be the position of a peekable symbol on which a Peek session is requested.</summary>
      <returns>&gt;A valid Peek session. May be null if no session could be created at the trigger point for the given relationship.</returns>
      <param name="textView">The ITextView over which to trigger a Peek session.</param>
      <param name="triggerPoint">The point in the text buffer at which a Peek session is requested.</param>
      <param name="relationshipName">The name of the requested relationship to be explored by a Peek session.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.DismissPeekSession(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Dismisses an active Peek session for a particular ITextView.</summary>
      <param name="textView">The ITextView over which to dismiss an active Peek session (if any).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.GetPeekSession(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Gets the active Peek session.</summary>
      <returns>The valid active Peek session for the given ITextView, or null if it doesn't exist.</returns>
      <param name="textView">The ITextView for which to get a Peek session.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.IsPeekSessionActive(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Determines whether or not a Peek session is active over the specified ITextView.</summary>
      <returns>true if an active Peek session exists for the given ITextView, false otherwise.</returns>
      <param name="textView">The ITextView for which to determine if Peek session is active.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.TriggerNestedPeekSession(Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions,Microsoft.VisualStudio.Language.Intellisense.IPeekSession)">
      <summary>Starts a nested Peek session, assuming the caret position to be the position of a peekable symbol on which a nested Peek session is requested. A Peek session is considered to be nested when it's started from a text view that represents an IPeekResult of a containing Peek session. This method doesn't create a new Peek session though, instead it adds another IPeekableItem to the containing session.</summary>
      <param name="options">"&gt;The options needed to create a Peek session.</param>
      <param name="containingSession">The containing Peek session.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.TriggerNestedPeekSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.String,Microsoft.VisualStudio.Language.Intellisense.IPeekSession)">
      <summary>Starts a nested Peek session, assuming the caret position to be the position of a peekable symbol on which a nested Peek session is requested. A Peek session is considered to be nested when it's started from a text view that represents an IPeekResult of a containing Peek session. This method doesn't create a new Peek session though, instead it adds another IPeekableItem to the containing session.</summary>
      <param name="textView">The ITextView over which to trigger a nested Peek session.</param>
      <param name="triggerPoint">The point in the text buffer at which a Peek session is requested.</param>
      <param name="relationshipName">The name of the requested relationship to be explored by a nested Peek session.</param>
      <param name="containingSession">The containing Peek session.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.TriggerNestedPeekSession(Microsoft.VisualStudio.Text.Editor.ITextView,System.String,Microsoft.VisualStudio.Language.Intellisense.IPeekSession)">
      <summary>Starts a nested Peek session, assuming the caret position to be the position of a peekable symbol on which a nested Peek session is requested. A Peek session is considered to be nested when it's started from a text view that represents an IPeekResult of a containing Peek session. This method doesn't create a new Peek session though, instead it adds another IPeekableItem to the containing session.</summary>
      <param name="textView">The ITextView over which to trigger a nested Peek session.</param>
      <param name="relationshipName">The name of the requested relationship to be explored by a nested Peek session.</param>
      <param name="containingSession">The containing Peek session.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.TriggerPeekSession(Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions)">
      <summary>Starts a Peek session, assuming the caret position to be the position of a peekable symbol n which a Peek session is requested.</summary>
      <returns>A valid Peek session. May be null if no session could be created at the caret position for the given relationship.</returns>
      <param name="options">The options needed to create a Peek session.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.TriggerPeekSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.String)">
      <summary>Starts a Peek session, assuming the caret position to be the position of a peekable symbol on which a Peek session is requested.</summary>
      <returns>A valid Peek session. May be null if no session could be created at the caret position for the given relationship.</returns>
      <param name="textView">The ITextView over which to trigger a Peek session.</param>
      <param name="relationshipName">The name of the requested relationship to be explored by a Peek session.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.TriggerPeekSession(Microsoft.VisualStudio.Text.Editor.ITextView,System.String)">
      <summary>Starts a Peek session, assuming the caret position to be the position of a peekable symbol on which a Peek session is requested.</summary>
      <returns>A valid Peek session. May be null if no session could be created at the caret position for the given relationship.</returns>
      <param name="textView">The ITextView over which to trigger a Peek session.</param>
      <param name="relationshipName">The name of the requested relationship to be explored by a Peek session.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekRelationship">
      <summary>Represents a relationship between IPeekableItems and IPeekResults.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekRelationship.DisplayName">
      <summary>Gets a localizable description of this relationship used for displaying it to the user.</summary>
      <returns>A localizable description of this relationship used for displaying it to the user.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekRelationship.Name">
      <summary>Gets the non-localized uniquely-identifying name of this relationship.</summary>
      <returns>The non-localized uniquely-identifying name of this relationship.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResizeListener">
      <summary>Describes an object that can be notified when the user resizes the Peek control.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResizeListener.OnResized(System.Object,Microsoft.VisualStudio.Language.Intellisense.PeekResizeEventArgs)">
      <summary>Gets called after the user has manually resized the PeekControl.</summary>
      <param name="sender">The sender.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult">
      <summary>Represents a single result of querying an IPeekableItem for a particular relationship, for instance a location of a source symbol definition.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResult.CanNavigateTo">
      <summary>Determines whether this result has a place to navigate to.</summary>
      <returns>True if can navigate, false otherwise.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResult.DisplayInfo">
      <summary>Gets properties used for displaying this result to the user.</summary>
      <returns>Properties used for displaying this result to the user.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPeekResult.Disposed">
      <summary>Occurs when an IPeekResult is disposed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResult.NavigateTo(System.Object)">
      <summary>Navigate to the location of this result. If the navigation is succesful, then the PostNavigationCallback will be called.</summary>
      <param name="data">The data that is to be passed directly into the third argument of PostNavigationCallback, if navigation is successful.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResult.PostNavigationCallback">
      <summary>This function will be called directly after navigation completes (if navigation was successful).</summary>
      <returns>Returns <see cref="T:System.Action`3" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection">
      <summary>Represents a collection of IPeekResults populated by content-type specific IPeekResultSource implementations when they are being queried for IPeekResults.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection.Add(Microsoft.VisualStudio.Language.Intellisense.IPeekResult)">
      <summary>Adds an item to the IPeekResultCollection.</summary>
      <param name="peekResult">The object to add to the IPeekResultCollection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection.Clear">
      <summary>Removes all results from the IPeekResultCollection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection.Contains(Microsoft.VisualStudio.Language.Intellisense.IPeekResult)">
      <summary>Determines whether the IPeekResultCollection contains a specific result.</summary>
      <returns>True if the result is found in the IPeekResultCollection; falseotherwise.</returns>
      <param name="peekResult">The object to locate in the IPeekResultCollection.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection.Count">
      <summary>Gets the number of elements contained in the IPeekResultCollection.</summary>
      <returns>The number of elements contained in the IPeekResultCollection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection.IndexOf(Microsoft.VisualStudio.Language.Intellisense.IPeekResult,System.Int32)">
      <summary>Finds the index of the result or returns -1 if the result was not found.</summary>
      <returns>The index of the result in the list, or -1 if the result was not found.</returns>
      <param name="peekResult">The result to search for in the list.</param>
      <param name="startAt">The start index for the search.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection.Insert(System.Int32,Microsoft.VisualStudio.Language.Intellisense.IPeekResult)">
      <summary>Inserts a result into the collection at the specified index.</summary>
      <param name="index">The zero-based index at which the result should be inserted.</param>
      <param name="peekResult">The result to insert.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection.Item(System.Int32)">
      <summary>Gets or sets the result at the specified index.</summary>
      <returns>The result at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection.Move(System.Int32,System.Int32)">
      <summary>Moves the result at the specified index to a new location in the collection.</summary>
      <param name="oldIndex">The zero-based index specifying the location of the result to be moved.</param>
      <param name="newIndex">The zero-based index specifying the new location of the result.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection.Remove(Microsoft.VisualStudio.Language.Intellisense.IPeekResult)">
      <summary>Removes the first occurrence of a specific result from the &lt;see cref="IPeekResultCollection"/&gt;./// &lt;/summary&gt;/// &lt;param name="item"&gt;The result to remove from the &lt;see cref="IPeekResultCollection"/&gt;&lt;/param&gt;/// &lt;returns&gt;&lt;</summary>
      <returns>trueif the result was successfully removed from the IPeekResultCollection; false otherwise. This method also returns falseif the result is not found in the IPeekResultCollection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection.RemoveAt(System.Int32)">
      <summary>Removes the result at the specified index of the collection.</summary>
      <param name="index">The zero-based index of the result to remove.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo">
      <summary>Defines elements of IPeekResult display information.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo.Label">
      <summary>Gets the localized label used for displaying this result to the user.</summary>
      <returns>The localized label used for displaying this result to the user.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo.LabelTooltip">
      <summary>Gets the localized label tooltip used for displaying this result to the user.Supported content types are strings and &lt;see cref="UIElement" /&gt; instances.</summary>
      <returns>The localized label tooltip used for displaying this result to the user.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo.Title">
      <summary>Gets the localized title used for displaying this result to the user.</summary>
      <returns>The localized title used for displaying this result to the user.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo.TitleTooltip">
      <summary>Gets the localized title tooltip used for displaying this result to the user. Supported content types are strings and UIElementinstances.</summary>
      <returns>the localized title tooltip used for displaying this result to the user.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo2">
      <summary>Defines extensions to IPeekResultDisplayInfo to provide more information about an IPeekResult.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo2.LengthOfTokenInLabel">
      <summary>Gets the length of the "interesting" token in the label. For instance, if Peek references was triggered on a method, this would be the length of the method name.</summary>
      <returns>The length of the "interesting" token in the label.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo2.StartIndexOfTokenInLabel">
      <summary>Gets the index of the first character of the "interesting" token in the label. For instance, if the Peek reference was triggered on a method, this would be the first character's index in the label that contains the method name.</summary>
      <returns>The index of the first character of the "interesting" token in the label.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultFactory">
      <summary>Represents a factory for creating IPeekResults.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultFactory.Create(Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo,System.Action)">
      <summary>Creates an instance of IPeekResult that is not based on a location in a document, but can be browsed externally, for example a metadata class that can only be browsed in the Object Browser.</summary>
      <returns>A valid instance of IExternallyBrowsablePeekResult.</returns>
      <param name="displayInfo">Defines properties used for displaying this result to the user.</param>
      <param name="browseAction">An action to browse the result externally (outside of Peek).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultFactory.Create(Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo,System.String,Microsoft.VisualStudio.Text.Span,System.Int32,System.Boolean)">
      <summary>Creates an instance of IPeekResult that is based on a location in a document.</summary>
      <returns>A valid instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" />.</returns>
      <param name="displayInfo">Defines properties used for displaying this result to the user.</param>
      <param name="filePath">The fully qualified file path identifying the document where the result is located.</param>
      <param name="eoiSpan">Span of the entity of interest as a character offset from the start of the buffer.</param>
      <param name="idPosition">Position of the identifying position as a character offset from the start of the buffer.</param>
      <param name="isReadOnly">Defines whether this result is read-only.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultFactory.Create(Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Creates an instance of IPeekResult that is based on a location in a document.</summary>
      <returns>A valid instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" />.</returns>
      <param name="displayInfo">Defines properties used for displaying this result to the user.</param>
      <param name="filePath">The fully qualified file path identifying the document where the result is located.</param>
      <param name="startLine">Line number of the result location's start position.</param>
      <param name="startIndex">Character index of the result location's start position.</param>
      <param name="endLine">Line number of the result location's end position.</param>
      <param name="endIndex">Character index of the result location's end position.</param>
      <param name="idLine">Line number of the result's identifying position (e.g a position of method's name token).</param>
      <param name="idIndex">Character index of the result's identifying position (e.g a position of method's name token).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultFactory.Create(Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>Creates an instance of IPeekResult that is based on a location in a document.</summary>
      <returns>A valid instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" />.</returns>
      <param name="displayInfo">Defines properties used for displaying this result to the user.</param>
      <param name="filePath">The fully qualified file path identifying the document where the result is located.</param>
      <param name="startLine">Line number of the result location's start position.</param>
      <param name="startIndex">Character index of the result location's start position.</param>
      <param name="endLine">Line number of the result location's end position.</param>
      <param name="endIndex">Character index of the result location's end position.</param>
      <param name="idLine">Line number of the result's identifying position (e.g a position of method's name token).</param>
      <param name="idIndex">Character index of the result's identifying position (e.g a position of method's name token).</param>
      <param name="isReadOnly">Defines whether this result is read-only.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultFactory.Create(Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo2,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Creates an instance of IPeekResult that is based on a location in a document.</summary>
      <returns>A valid instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" />.</returns>
      <param name="displayInfo">Defines properties used for displaying this result to the user.</param>
      <param name="filePath">The fully qualified file path identifying the document where the result is located.</param>
      <param name="startLine">Line number of the result location's start position.</param>
      <param name="startIndex">Character index of the result location's start position.</param>
      <param name="endLine">Line number of the result location's end position.</param>
      <param name="endIndex">Character index of the result location's end position.</param>
      <param name="idStartLine">Line number of the result's identifying span's start position (e.g a position of method's name token).</param>
      <param name="idStartIndex">Character index of the result's identifying span's start position (e.g a position of method's name token).</param>
      <param name="idEndLine">Line number of the result's identifying span's end position.</param>
      <param name="idEndIndex">Character index of the result's identifying span's end position.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultFactory.Create(Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo2,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>Creates an instance of IPeekResult that is based on a location in a document.</summary>
      <returns>A valid instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" />.</returns>
      <param name="displayInfo">Defines properties used for displaying this result to the user.</param>
      <param name="filePath">The fully qualified file path identifying the document where the result is located.</param>
      <param name="startLine">Line number of the result location's start position.</param>
      <param name="startIndex">Character index of the result location's start position.</param>
      <param name="endLine">Line number of the result location's end position.</param>
      <param name="endIndex">Character index of the result location's end position.</param>
      <param name="idStartLine">Line number of the result's identifying span's start position (e.g a position of method's name token).</param>
      <param name="idStartIndex">Character index of the result's identifying span's start position (e.g a position of method's name token).</param>
      <param name="idEndLine">Line number of the result's identifying span's end position.</param>
      <param name="idEndIndex">Character index of the result's identifying span's end position.</param>
      <param name="isReadOnly">Defines whether this result is read-only.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultFactory.Create(Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo2,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Guid)">
      <summary>Creates an instance of IPeekResult that is based on a location in a document.</summary>
      <returns>A valid instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" />.</returns>
      <param name="displayInfo">Defines properties used for displaying this result to the user.</param>
      <param name="filePath">The fully qualified file path identifying the document where the result is located.</param>
      <param name="startLine">Line number of the result location's start position.</param>
      <param name="startIndex">Character index of the result location's start position.</param>
      <param name="endLine">Line number of the result location's end position.</param>
      <param name="endIndex">Character index of the result location's end position.</param>
      <param name="idStartLine">Line number of the result's identifying span's start position (e.g a position of method's name token).</param>
      <param name="idStartIndex">Character index of the result's identifying span's start position (e.g a position of method's name token).</param>
      <param name="idEndLine">Line number of the result's identifying span's end position.</param>
      <param name="idEndIndex">Character index of the result's identifying span's end position.</param>
      <param name="isReadOnly">Defines whether this result is read-only.</param>
      <param name="editorDestination">A Guid representing the editor the IDocumentPeekResult should navigate to.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultFactory.Create(Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo2,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Guid,System.Action{Microsoft.VisualStudio.Language.Intellisense.IPeekResult,System.Object,System.Object})"></member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation">
      <summary>Defines WPF visual representation of an &lt; IPeekResult.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.CanSave(System.String@)">
      <summary>Can this presentation be saved?</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
      <param name="defaultPath">Location the presentation will be saved to by default (will be null if returning false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.CaptureScrollState">
      <summary>Capture any information about the result prior to navigating to another frame (by using the peek navigation history or doing a recursive peek).</summary>
      <returns>Returns <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultScrollState" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.Close">
      <summary>Closes the represenation of the Peek result. An IPeekResultPresentation for an IDocumentPeekResult would for example close the document in this method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.Create(Microsoft.VisualStudio.Language.Intellisense.IPeekSession,Microsoft.VisualStudio.Language.Intellisense.IPeekResultScrollState)">
      <summary>Create WPF visual representation of the Peek result. An IPeekResultPresentation for an &lt; IDocumentPeekResult would for example open document and return a WPF control of the IWpfTextViewHost.</summary>
      <returns>A valid UIElement representing the Peek result.</returns>
      <param name="session"> The IPeekSession containing the Peek result.</param>
      <param name="scrollState">The state that defines the desired scroll state of the result. May be null (in which case the default scroll state is used). </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.IsDirty">
      <summary>Determines whether or not this presentation is dirty.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.IsDirtyChanged">
      <summary>Raised when IsDirty changes.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.IsReadOnly">
      <summary>Determines whether or not this presentation is read-only.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.IsReadOnlyChanged">
      <summary>Raised when IsReadOnly changes.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.RecreateContent">
      <summary>Raised when the content of the presentation needs to be recreated.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.ScrollIntoView(Microsoft.VisualStudio.Language.Intellisense.IPeekResultScrollState)">
      <summary>Scrolls open representation of the Peek result into view.</summary>
      <param name="scrollState">The state that defines the desired scroll state of the result. May be null (in which case the default scroll state is used.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.SetKeyboardFocus">
      <summary>Sets keyboard focus to the open representation of the Peek result.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.TryOpen(Microsoft.VisualStudio.Language.Intellisense.IPeekResult)">
      <summary>Tries to open another IPeekResult while keeping the same presentation. For example document result presentation might check if <paramref name="otherResult" /> represents a result in the same document and would reuse already open document.</summary>
      <returns>True if <paramref name="otherResult" /> could be opened, false otherwise.</returns>
      <param name="otherResult">Another result to be opened.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.TryPrepareToClose">
      <summary>Prepare to close the presentation.</summary>
      <returns>Returns true if the presentation is allowed to close; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.TrySave(System.Boolean)">
      <summary>Save the current version of this presentation.</summary>
      <returns>true if the save succeeded.</returns>
      <param name="saveAs">If true, ask the user for a save location.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.ZoomLevel">
      <summary>Gets or sets the ZoomLevel factor associated with the presentation. Represented as a percentage (100.0 == default).</summary>
      <returns>The ZoomLevel factor associated with the presentation.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresenter">
      <summary>Defines IPeekResult presenter, which can create WPF visual representation of a Peek result.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresenter.TryCreatePeekResultPresentation(Microsoft.VisualStudio.Language.Intellisense.IPeekResult)">
      <summary>Creates IPeekResultPresentation instance for the given IPeekResult.</summary>
      <returns>A valid IPeekResultPresentation instance or null if none could be created by this presenter.</returns>
      <param name="result">The Peek result for which to create a visual representation.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultQuery">
      <summary>Represents an asynchronous query for IPeekResults.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultQuery.Cancel">
      <summary>Cancels the query.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPeekResultQuery.Completed">
      <summary>Raised when the query is successfully completed.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPeekResultQuery.Failed">
      <summary>Raised when the query failed.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPeekResultQuery.ProgressChanged">
      <summary>Raised when the query progress has changed.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultQuery.Results">
      <summary>An observable collection of IPeekResults for the given query.</summary>
      <returns>Returns <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultQuery.Start">
      <summary>Starts the query.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultScrollState">
      <summary>captures the state of some result displayed in Peek.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultScrollState.RestoreScrollState(Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation)">
      <summary>Restore the presentation to the captured state. <paramref name="presentation" /> will always be the presentation that created this via presentation.CaptureScrollState().</summary>
      <param name="presentation">Result Presentation to scroll.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultSource">
      <summary>Represents an object instance that can be queried for supported relationships and results for a particular relationship. Content-type specific Peek providers implement this interface to provide results of querying IPeekableItem instances.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultSource.FindResults(System.String,Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection,System.Threading.CancellationToken,Microsoft.VisualStudio.Language.Intellisense.IFindPeekResultsCallback)">
      <summary>Populates the collection of IPeekResults for the given relationship.</summary>
      <param name="relationshipName">The case insenitive name of the relationship to be queried for results.</param>
      <param name="resultCollection">Represents a collection of &lt;see cref="IPeekResult"/&gt;s to be populated.</param>
      <param name="cancellationToken">The cancellation token used by the caller to cancel the operation.</param>
      <param name="callback">The IFindPeekResultsCallback instance used to report progress and failures.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekSession">
      <summary>Defines a Peek session, which is a type of IntelliSense session.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekSession.CreationOptions">
      <summary>Gets the PeekSessionCreationOptions object that was used to create this Peek session.</summary>
      <returns>The PeekSessionCreationOptions object that was used to create this Peek session.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPeekSession.NestedPeekTriggered">
      <summary>Occurs when nested Peek command is triggered. In a typical case this event occurs when Peek command is invoked on a text view that represents one of Peek results pertaining to this Peek session.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekSession.PeekableItems">
      <summary>Gets the collection of IPeekableItem objects.</summary>
      <returns>Returns <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekSession.QueryPeekResults(Microsoft.VisualStudio.Language.Intellisense.IPeekableItem,System.String)">
      <summary>Starts asynchronous query for IPeekResults for the given relationship on the given IPeekableItem.</summary>
      <returns>The IPeekResultQuery instance representing the results and state of the query.</returns>
      <param name="peekableItem">A IPeekableItem" to be queried for results.</param>
      <param name="relationshipName">The case insensitive name of the relationship.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekSession.RelationshipName">
      <summary>Case insensitive name of the relationship to which this session pertains.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekSession.TriggerNestedPeekSession(Microsoft.VisualStudio.Language.Intellisense.IPeekSession)">
      <summary>Starts the nested Peek session, queries IPeekableItemSources for IPeekableItems and raises the NestedPeekTriggered event on success.</summary>
      <param name="nestedSession">The nested Peek session.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter">
      <summary>Defines an IntelliSense presenter that is rendered as a popup within an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.Opacity">
      <summary>Gets or sets the opacity of this popup presenter.</summary>
      <returns>The opacity of this popup presenter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.PopupStyles">
      <summary>Gets a set of flags that determine the popup style.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Text.Adornments.PopupStyles" />.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.PopupStylesChanged">
      <summary>Occurs when the <see cref="P:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.PopupStyles" /> property changes.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.PresentationSpan">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" /> to which this presenter is related.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" /> to which this presenter is related.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.PresentationSpanChanged">
      <summary>Occurs when the <see cref="P:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.PresentationSpan" /> property changes.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.SpaceReservationManagerName">
      <summary>Gets the name of the space reservation manager that should be used to create popups for this presenter.</summary>
      <returns>The name of the space reservation manager that should be used to create popups for this presenter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.SurfaceElement">
      <summary>Gets the WPF <see cref="T:System.Windows.UIElement" /> that the presenter wants to be displayed inside a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> popup.</summary>
      <returns>The WPF <see cref="T:System.Windows.UIElement" /> that the presenter wants to be displayed inside a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> popup.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.SurfaceElementChanged">
      <summary>Occurs when the WPF surface element is changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoBroker">
      <summary>Defines a Quick Info broker.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoBroker.CreateQuickInfoSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.Boolean)">
      <summary>Creates but does not start a Quick Info session at the specified location in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</summary>
      <returns>A valid Quick Info session, or null if none could be created.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />  for which a Quick Info session should be created.</param>
      <param name="triggerPoint">The <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" /> in the text buffer at which Quick Info should be triggered.</param>
      <param name="trackMouse">true if the session should be auto-dismissed when the mouse leaves the applicability span of the session, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoBroker.GetSessions(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Gets the set of active Quick Info sessions for the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> in which this broker operates.</summary>
      <returns>The list of valid Quick Info sessions active over the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> objects.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which Quick Info sessions should be returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoBroker.IsQuickInfoActive(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Determines whether there is at least one active Quick Info session in the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
      <returns>true if there is at least one active Quick Info session over the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />, false otherwise.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which Quick Info session status is to be determined.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoBroker.TriggerQuickInfo(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Triggers Quick Info at the position of the caret in the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession" />.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which Quick Info is to be triggered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoBroker.TriggerQuickInfo(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.Boolean)">
      <summary>Triggers Quick Info at the specified position in the buffer, either tracking or not tracking the mouse.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession" />.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which Quick Info is to be triggered.</param>
      <param name="triggerPoint">The <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" /> in the text buffer at which Quick Info should be triggered. </param>
      <param name="trackMouse">true if the session should be dismissed when the mouse leaves the applicability span of the session, false otherwise. </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession">
      <summary>Represents an IntelliSense session used to display Quick Info information.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession.ApplicableToSpan">
      <summary>Gets the applicability span for this session.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" />.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession.ApplicableToSpanChanged">
      <summary>Occurs when the <see cref="P:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession.ApplicableToSpan" /> property on this session changes.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession.QuickInfoContent">
      <summary>Gets the content that will be displayed by this session.</summary>
      <returns>The content.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession.TrackMouse">
      <summary>Determines whether this session tracks the mouse.</summary>
      <returns>true if the session tracks the mouse, otherwise false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession2">
      <summary>Extends the IQuickInfoSession interface with support for interactive Quick Info content.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession2.HasInteractiveContent">
      <summary>Determines whether this IQuickInfoSession contains interactive content.</summary>
      <returns>True if this IQuickInfoSession contains interactive content, otherwise false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSource">
      <summary>Represents a Quick Info provider, which acts as a provider of Quick Info information for a text buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSource.AugmentQuickInfoSession(Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession,System.Collections.Generic.IList{System.Object},Microsoft.VisualStudio.Text.ITrackingSpan@)">
      <summary>Determines which pieces of Quick Info content should be part of the specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession" />.</summary>
      <param name="session">The session for which completions are to be computed.</param>
      <param name="quickInfoContent">The QuickInfo content to be added to the session.</param>
      <param name="applicableToSpan">The <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" /> to which this session applies.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSourceProvider">
      <summary>Represents a factory of Quick Info sources.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSourceProvider.TryCreateQuickInfoSource(Microsoft.VisualStudio.Text.ITextBuffer)">
      <summary>Creates a Quick Info source for the specified context.</summary>
      <returns>A valid <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSource" />, or null if none could be created.</returns>
      <param name="textBuffer">The text buffer for which to create a provider.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISignature">
      <summary>Represents an individual signature displayed in a tool, such as the signature help tool.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignature.ApplicableToSpan">
      <summary>Gets the span of text in the buffer to which this signature help is applicable.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignature.Content">
      <summary>Gets the content of the signature, including all the characters to be displayed.</summary>
      <returns>The content.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignature.CurrentParameter">
      <summary>Gets the current parameter for this signature.</summary>
      <returns>The current parameter.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.ISignature.CurrentParameterChanged">
      <summary>Occurs when the currently-selected parameter changes.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignature.Documentation">
      <summary>Gets the documentation associated with this signature.</summary>
      <returns>The documentation, which describes the method and signature.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignature.Parameters">
      <summary>Gets the list of parameters that this signature knows about.</summary>
      <returns>The list of parameters.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignature.PrettyPrintedContent">
      <summary>Gets the content of the signature, pretty-printed into a form suitable for display on-screen.</summary>
      <returns>The signature content.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker">
      <summary>Defines the signature help broker, which is the primary component of the signature help process.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker.CreateSignatureHelpSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.Boolean)">
      <summary>Creates a signature help session without starting it.</summary>
      <returns>A valid <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession" />. May be null if no session could be created.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which signature help is requested.</param>
      <param name="triggerPoint">The point in the text buffer at which signature help is requested.</param>
      <param name="trackCaret">true if this session should track the caret, false otherwise. When the caret is tracked, the only items to be displayed are those whose applicability span contains the caret.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker.DismissAllSessions(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Dismisses any active signature help sessions in this broker's <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which all signature help sessions should be dismissed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker.GetSessions(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Gets the list of all signature help sessions for this broker's <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession" />.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker.IsSignatureHelpActive(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Determines whether signature help is active.</summary>
      <returns>true if there is at least one signature help session over the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />, false otherwise.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over signature help status should be determined.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker.TriggerSignatureHelp(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Begins the process of signature help at the position of the caret.</summary>
      <returns>A valid signature help session. May be null if no session could be created.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to trigger signature help.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker.TriggerSignatureHelp(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.Boolean)">
      <summary>Starts the process of signature help at the specified point.</summary>
      <returns>A valid signature help session. May be null if no session could be created.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to trigger signature help.</param>
      <param name="triggerPoint">The point in the text buffer at which signature help is requested.</param>
      <param name="trackCaret">true if this session should track the caret, false otherwise. When the caret is tracked, the only items to be displayed are those whose applicability span contains the caret.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession">
      <summary>Defines an IntelliSense session used for displaying signature help.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession.SelectedSignature">
      <summary>Gets the signature that is currently selected from among the set of valid signatures.</summary>
      <returns>The selected signature.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession.SelectedSignatureChanged">
      <summary>Occurs when the <see cref="P:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession.SelectedSignature" /> property changes.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession.Signatures">
      <summary>Gets the set of valid signatures for this session.</summary>
      <returns>The valid signatures.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSource">
      <summary>Defines a provider of signature help information that is used in the IntelliSense process.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSource.AugmentSignatureHelpSession(Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession,System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.ISignature})">
      <summary>Determines which <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignature" />s should be part of the specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession" />.</summary>
      <param name="session">The session for which completions are to be computed.</param>
      <param name="signatures">The set of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignature" />s to be added to the session.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSource.GetBestMatch(Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession)">
      <summary>Computes the best matching <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignature" /> instance for the given signature help session. Only the highest- priority signature help provider is asked for this information.</summary>
      <returns>A valid <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignature" /> that is also a member of the Signatures collection of the specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession" />. It can return null if no best match could be determined, and the next highest-priority signature help provider will be asked to determine the best match.</returns>
      <param name="session">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession" /> for which the best matching <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignature" /> should be determined.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSourceProvider">
      <summary>Defines an extension used to create signature help providers from a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> opened in a given context.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSourceProvider.TryCreateSignatureHelpSource(Microsoft.VisualStudio.Text.ITextBuffer)">
      <summary>Attempts to create a signature help provider for the given text buffer.</summary>
      <returns>A valid signature help provider, or null if none could be created.</returns>
      <param name="textBuffer">The text buffer for which to create a signature help provider.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISmartTagAction">
      <summary>Defines a smart tag action.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction" /> for a replacement.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagAction.ActionSets">
      <summary>Gets the list of smart tag action sets contained inside this smart tag action.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction" /> for a replacement.</summary>
      <returns>The list of action sets.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagAction.DisplayText">
      <summary>Gets the text that is displayed in the default smart tag presenter.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction" /> for a replacement.</summary>
      <returns>The display text.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagAction.Icon">
      <summary>Gets image information that is displayed alongside the display text in the default smart tag.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction" /> for a replacement.</summary>
      <returns>The icon.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISmartTagAction.Invoke">
      <summary>A callback used to invoke the smart tag action.Smart tags are deprecated in favor of light bulbs. See <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.Invoke(System.Threading.CancellationToken)" /> for a replacement.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagAction.IsEnabled">
      <summary>Determines whether the smart tag action is enabled. By default, disabled smart tags are rendered but cannot be invoked.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction" /> for a replacement.</summary>
      <returns>true if the action is enabled, otherwise false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISmartTagBroker">
      <summary>Defines a smart tag broker, which is responsible for triggering smart tags. Components call methods on the broker in order to trigger smart tags.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker" /> for a replacement.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISmartTagBroker.CreateSmartTagSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Language.Intellisense.SmartTagType,Microsoft.VisualStudio.Text.ITrackingPoint,Microsoft.VisualStudio.Language.Intellisense.SmartTagState)">
      <summary>Creates a smart tag session for smart tags of the specified type at the specified location.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker" /> for a replacement.</summary>
      <returns>A valid smart tag session.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to create a smart tag session.</param>
      <param name="type">The type of smart tag that should be created.</param>
      <param name="triggerPoint">The location in the buffer where the smart tag session should be created.</param>
      <param name="state">The initial state of the smart tag session.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISmartTagBroker.GetSessions(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Gets the list of currently-active smart tag sessions for the specified text view.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker" /> for a replacement.</summary>
      <returns>A list of smart tag sessions for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to retrieve a list of smart tag sessions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISmartTagBroker.IsSmartTagActive(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Determines whether a smart tag is active.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker" /> for a replacement.</summary>
      <returns>true if there is at least one smart tag session for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />, false otherwise.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which to determine if there are any active smart tag sessions.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession">
      <summary>Defines a smart tag session, which encapsulates all the information about a particular invocation of the smart tag system.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for a replacement.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.ActionSets">
      <summary>Gets the collection of actions that this session displays.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for a replacement.</summary>
      <returns>The action sets.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.ApplicableToSpan">
      <summary>Gets or sets the span to which this session is applicable in the text buffer. This is used to position any popups that are rendered by smart tag presenters.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for a replacement.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" />.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.ApplicableToSpanChanged">
      <summary>Occurs when the <see cref="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.ApplicableToSpan" /> property changes.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for a replacement.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.IconSource">
      <summary>Gets or sets an icon that can be used in the display of this session. Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for a replacement.</summary>
      <returns>A <see cref="T:System.Windows.Media.ImageSource" />.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.IconSourceChanged">
      <summary>Occurs when the session's icon changes.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for a replacement.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.State">
      <summary>Gets or sets the current state of this session. Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for a replacement.</summary>
      <returns>The current smart tag state.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.StateChanged">
      <summary>Occurs when the state of this session changes.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for a replacement.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.TagSpan">
      <summary>The span over which the tag should be rendered.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for a replacement.</summary>
      <returns>The span.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.TagSpanChanged">
      <summary>Occurs when the <see cref="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.TagSpan" /> property changes.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for a replacement.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.TagText">
      <summary>Gets or sets the text to be displayed with the tag.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for a replacement.</summary>
      <returns>The tag text.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.Type">
      <summary>The type of this smart tag session.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for a replacement.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SmartTagType" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSource">
      <summary>Defines a source for smart tag data.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionSource" /> for a replacement.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSource.AugmentSmartTagSession(Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession,System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet})">
      <summary>Determines which <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet" /> objects should be part of the specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession" />.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionSource" /> for a replacement.</summary>
      <param name="session">The session for which completions are to be computed.</param>
      <param name="smartTagActionSets">The set of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet" /> objects to be added to the session.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSourceProvider">
      <summary>Defines a provider of a smart tag source.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionSourceProvider" /> for a replacement.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSourceProvider.TryCreateSmartTagSource(Microsoft.VisualStudio.Text.ITextBuffer)">
      <summary>Attempts to create a smart tag source for the specified buffer.Smart tags are deprecated in favor of light bulbs. See <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionSourceProvider" /> for a replacement.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSource" />, or null if no smart tag source could be created.</returns>
      <param name="textBuffer">The text buffer for which to create a smart tag source.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction">
      <summary>A action that is suggested as possible. Examples of such suggested actions include quick fixes for syntax errors, suggestions aimed on improving code quality or refactoring. Suggested actions are provided by ISuggestedActionsSource instances and represented by a LightBulb presenter as menu items in a LightBulb dropdown menu.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.DisplayText">
      <summary>Gets the localized text representing the suggested action. This property should never be null.</summary>
      <returns>The localized text representing the suggested action.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.GetActionSetsAsync(System.Threading.CancellationToken)"></member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.GetPreviewAsync(System.Threading.CancellationToken)"></member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.HasActionSets">
      <summary>Determines whether this action has nested suggested action sets.</summary>
      <returns>True if this action has nested suggested action sets, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.HasPreview">
      <summary>Determines whether this suggested action can provide a preview via GetPreviewAsync(CancellationToken)./// &lt;/summary&gt;/// &lt;remarks&gt; &lt;/remarks&gt;</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.IconAutomationText">
      <summary>Gets the text to be used as the automation name for the icon when it's displayed. For purposes of accessibility, this property should not be null if the icon is specified.</summary>
      <returns>The text to be used as the automation name for the icon.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.IconMoniker">
      <summary>Gets an optional icon representing the suggested action or null if this suggested action doesn't have an icon.</summary>
      <returns>An optional icon representing the suggested action or null if this suggested action doesn't have an icon.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.InputGestureText">
      <summary>Gets the text describing an input gesture that will apply the suggested action.</summary>
      <returns>The text describing an input gesture that will apply the suggested action.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.Invoke(System.Threading.CancellationToken)">
      <summary>Invokes the suggested action.</summary>
      <param name="cancellationToken">A cancellation token that allows the user to cancel invocation of the action.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategory">
      <summary>Represents a suggested action.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategory.BaseCategories">
      <summary>Gets the set of all categories from which the current ISuggestedActionCategory is derived. This value is never null, though it may be an empty set.</summary>
      <returns>The set of all categories from which the current ISuggestedActionCategory is derived.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategory.CategoryName">
      <summary>Gets the unique name of the ISuggestedActionCategory. This name must be unique, and must not be null. Comparisons performed on this name are case-insensitive.</summary>
      <returns>The unique name of the ISuggestedActionCategory.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategory.DisplayName">
      <summary>Gets the localized display name of the ISuggestedActionCategory.</summary>
      <returns>The localized display name of the ISuggestedActionCategory.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategory.IsOfCategory(System.String)">
      <summary>Determines whether this ISuggestedActionCategory derives from the category specified by <paramref name="category" />.</summary>
      <returns>True if this category derives from the one specified by <paramref name="category" />, otherwise false.</returns>
      <param name="category">The name of the base category.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategoryRegistryService">
      <summary>Represents the service that maintains the collection of suggested action categories.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategoryRegistryService.AllCodeFixes">
      <summary>Gets a predefined ISuggestedActionCategorySet containing all the suggested actions of the code fixes category.</summary>
      <returns>A predefined ISuggestedActionCategorySet containing all the suggested actions of the code fixes category.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategoryRegistryService.AllCodeFixesAndRefactorings">
      <summary>Gets a predefined ISuggestedActionCategorySet containing all code fixes and refactorings categories.</summary>
      <returns>A predefined ISuggestedActionCategorySet containing all code fixes and refactorings categories.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategoryRegistryService.AllRefactorings">
      <summary>Gets a predefined ISuggestedActionCategorySet containing all suggested actions of the Refactorings category.</summary>
      <returns>A predefined ISuggestedActionCategorySet containing all suggested actions of the Refactorings category</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategoryRegistryService.Any">
      <summary>Gets a predefined ISuggestedActionCategorySet containing any category.</summary>
      <returns>A predefined ISuggestedActionCategorySet containing any category.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategoryRegistryService.Categories">
      <summary>Gets an enumeration of all categories, including the "unknown" category.</summary>
      <returns>An enumeration of all categories, including the "unknown" category.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategoryRegistryService.CreateSuggestedActionCategorySet(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Creates a new ISuggestedActionCategorySet containing the given categories.</summary>
      <returns>An instance of ISuggestedActionCategorySet containing given categories.</returns>
      <param name="categories">A list of categories to be included into the set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategoryRegistryService.CreateSuggestedActionCategorySet(System.String[])">
      <summary>Creates a new ISuggestedActionCategorySet containing given categories.</summary>
      <returns>An instance of ISuggestedActionCategorySet containing the given categories.</returns>
      <param name="categories">A list of categories to be included into the set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategoryRegistryService.GetCategory(System.String)">
      <summary>Gets the ISuggestedActionCategory object with the specified <paramref name="categoryName" />.</summary>
      <returns>The category, or null if no category is found.</returns>
      <param name="categoryName">The name of the category. Name comparisons are case-insensitive.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet">
      <summary>Represents a set of suggested action category names.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet.Contains(System.String)">
      <summary>Determines whether the given suggested action category is a member of the set.</summary>
      <returns>True if the given suggested action category is a member of the set, otherwise false.</returns>
      <param name="categoryName">The name of the category.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource">
      <summary>Represents a provider of suggested actions for a span of text in a ITextBuffer. Instances of ISuggestedActionsSource are created by ISuggestedActionsSourceProvider MEF components that match the text buffer's content type.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource.GetSuggestedActions(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.SnapshotSpan,System.Threading.CancellationToken)">
      <summary>Synchronously returns a list of suggested actions for a given span of text.</summary>
      <returns>A list of suggested actions, or null if no actions can be suggested for a given span of text in the ITextBuffer.</returns>
      <param name="requestedActionCategories">A set of suggested action categories.</param>
      <param name="range">A span of text in the ITextBuffer over which to return suggested actions.</param>
      <param name="cancellationToken">A cancellation token that allows to cancel getting list of suggested actions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource.HasSuggestedActionsAsync(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.SnapshotSpan,System.Threading.CancellationToken)">
      <summary>Asynchronously determines whether this provider can provide any suggested actions for a given span of text in the ITextBuffer.</summary>
      <returns>A  Task instance that when completed returns true if any suggested actions can be provided, or false otherwise.</returns>
      <param name="requestedActionCategories">A set of suggested action categories.</param>
      <param name="range">A span of text in the ITextBuffer over which to check for suggested actions.</param>
      <param name="cancellationToken">A cancellation token that is used to cancel checking for suggested actions.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource.SuggestedActionsChanged">
      <summary>Raised when a list of available suggested actions have changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSourceProvider">
      <summary>Defines a provider of a suggested actions source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSourceProvider.CreateSuggestedActionsSource(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
      <summary>Creates suggested actions source for a given text buffer.</summary>
      <returns>The ISuggestedActionsSource, or null if no suggested actions source could be created.</returns>
      <param name="textView">The text view for which to create a suggested actions source.</param>
      <param name="textBuffer">The text buffer for which to create a suggested actions source.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionWithFlavors">
      <summary>A suggested action that contains nested set of suggested actions representing flavors of their parent action.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ITextFormattable">
      <summary>Provides a way to override the text formatting properties for an object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ITextFormattable.GetHighlightedTextRunProperties(System.Windows.Media.TextFormatting.TextRunProperties)">
      <summary>Gets a set of text run properties that overrides the default set used to display text when this object is highlighted.</summary>
      <returns>A set of <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that should be used to display this object's highlighted text.</returns>
      <param name="defaultHighlightedTextRunProperties">The set of <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that would have been used to present the highlighted object if they had not been overridden..</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ITextFormattable.GetTextRunProperties(System.Windows.Media.TextFormatting.TextRunProperties)">
      <summary>Gets a set of <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that overrides the default <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> used to display the text.</summary>
      <returns>A set of <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that should be used to display this object's text.</returns>
      <param name="defaultTextRunProperties">The set of <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that would have been used to present this object if they had not been overridden.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IUIElementProvider`2">
      <summary>Defines the provider of WPF UIElements for objects of a certain type, for a specified context.</summary>
      <typeparam name="TItem">The type of the item.</typeparam>
      <typeparam name="TContext">The type of the context.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IUIElementProvider`2.GetUIElement(`0,`1,Microsoft.VisualStudio.Language.Intellisense.UIElementType)">
      <summary>Gets a <see cref="T:System.Windows.UIElement" /> to display an item for the specified context.</summary>
      <returns>A valid WPF UIElement, or null if none could be created.</returns>
      <param name="itemToRender">The item for which to return a UIElement.</param>
      <param name="context">The context in which the item is to be rendered.</param>
      <param name="elementType">The type of UIElement to be returned.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.IWpfKeyboardTrackingService">
      <summary>Defines a MEF service responsible for tracking the keyboard in hosts of the WPF editor. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IWpfKeyboardTrackingService.BeginTrackingKeyboard(System.IntPtr,System.Collections.Generic.IList{System.UInt32})">
      <summary>Starts tracking the keyboard. </summary>
      <param name="handle">A valid Win32 window handle (HWND) to which messages should be redirected</param>
      <param name="messagesToCapture">A list of Win32 messages to redirect to the specified window handle</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.IWpfKeyboardTrackingService.EndTrackingKeyboard">
      <summary>Stops tracking the keyboard.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle">
      <summary>Defines a set of properties that will be used to style the default LightBulb presenter.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.#ctor">
      <summary>Initializes a new instance of LightBulbPresenterStyle.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.ActuatorBackgroundBrush">
      <summary>Gets or sets a Brush that is used to paint the background of the LightBulb actuator.</summary>
      <returns>A Brush that is used to paint the background of the LightBulb actuator.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.ActuatorBorderBrush">
      <summary>Gets or sets a Brush that is used to paint the border of the LightBulb actuator.</summary>
      <returns>A Brush that is used to paint the border of the LightBulb actuator.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.ActuatorDropdownChevronBrush">
      <summary>Gets or sets a Brush that is used to paint the chevron of the LightBulb actuator.</summary>
      <returns>A Brush that is used to paint the chevron of the LightBulb actuator.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.ActuatorHoverBackgroundBrush">
      <summary>Gets or sets a Brush that is used to paint the background of the LightBulb actuator in hover mode.</summary>
      <returns>A Brush that is used to paint the background of the LightBulb actuator in hover mode.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.ActuatorHoverBorderBrush">
      <summary>Gets or sets a Brush that will be used to paint the border of the LightBulb actuator.</summary>
      <returns>A Brush that will be used to paint the border of the LightBulb actuator.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.DiscoveryModeBackgroundColor">
      <summary>Gets or sets a Color that is used to paint the background of the LightBulb in discovery mode.</summary>
      <returns>A Color that is used to paint the background of the LightBulb in discovery mode.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.DiscoveryModeBorderColor">
      <summary>Gets or sets a Color that is used to paint the border of the LightBulb in discovery mode.</summary>
      <returns>A Color that is used to paint the border of the LightBulb in discovery mode.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.NotifyPropertyChanged(System.String)">
      <summary>Notifies that a property on this object has changed.</summary>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.PreviewBackgroundBrush">
      <summary>Gets or sets a Brush that will be used to paint the background of the LightBulb preview pane.</summary>
      <returns>A Brush that will be used to paint the background of the LightBulb preview pane.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.PreviewBorderBrush">
      <summary>Gets or sets a Brush that is used to paint the border of the LightBulb preview pane.</summary>
      <returns>A Brush that is used to paint the border of the LightBulb preview pane.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.PreviewFocusBackgroundBrush">
      <summary>Gets or sets a Brush that will be used to paint the backgound of the focused LightBulb preview pane.</summary>
      <returns>a Brush that will be used to paint the backgound of the focused LightBulb preview pane.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.PropertyChanged">
      <summary>Raised when a property on this object's value changes.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.ShowQuickFixesKeyBinding">
      <summary>Gets or sets a shortcut of the command that expands the LightBulb.</summary>
      <returns>A shortcut of the command that expands the LightBulb.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.ShowQuickFixesKeyBindingBrush">
      <summary>Gets or sets a brush that will be used to paint the shortcut of the command that expands the LightBulb.</summary>
      <returns>A brush that will be used to paint the shortcut of the command that expands the LightBulb.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.ShowQuickFixesLinkBrush">
      <summary>Gets or sets a Brush that is used to paint the hyperlink in QuickInfo that expands a QuickInfo-based LightBulb.</summary>
      <returns>A Brush that is used to paint the hyperlink in QuickInfo that expands a QuickInfo-based LightBulb.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.NestedPeekTriggeredEventArgs">
      <summary>Provides information about nested Peek invocation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.NestedPeekTriggeredEventArgs.#ctor(System.String,Microsoft.VisualStudio.Text.ITrackingPoint,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.IPeekableItem})">
      <summary>Creates anew instance of NestedPeekTriggeredEventArgs.</summary>
      <param name="relationshipName">Case insensitive name of the relationship that was used to invoke nested Peek.</param>
      <param name="trackingPoint">The tracking point.</param>
      <param name="peekableItems">The list of the IPeekableItem objects that can provide results of the nested Peek invocation.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.NestedPeekTriggeredEventArgs.PeekableItems">
      <summary>Gets the collection of IPeekableItem objects.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.NestedPeekTriggeredEventArgs.RelationshipName">
      <summary>Case insensitive name of the relationship that was used to invoke nested Peek.</summary>
      <returns>Case insensitive name of the relationship that was used to invoke nested Peek.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.NestedPeekTriggeredEventArgs.TrackingPoint">
      <summary>Gets the ITrackingPoint at which nested Peek was invoked.</summary>
      <returns>Returns <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.PeekResizeEventArgs">
      <summary>Contains information describing how a user has resized the Peek control.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.PeekResizeEventArgs.#ctor(System.Double,System.Double)">
      <summary>Constructs a new instance of PeekResizeEventArgs with the current height of the Peek control both in pixels and as a percentage of the containing ITextView.</summary>
      <param name="newHeightAbsolute">The height of the Peek control in pixels.</param>
      <param name="newHeightProportion">The height of the Peek control as a proportion of the containing ITextView. Valid values are between 0 and 1.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekResizeEventArgs.NewHeightAbsolute">
      <summary>Gets the height of the Peek control in pixels.</summary>
      <returns>The height of the Peek control in pixels.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekResizeEventArgs.NewHeightProportion">
      <summary>Gets the height of the Peek control as a proportion of the containing ITextView. Values returned should fall into the range between 0 and 1.</summary>
      <returns>The height of the Peek control as a proportion of the containing ITextView. </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo">
      <summary>Defines elements of IPeekResult display information.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo.#ctor(System.String,System.Object,System.String,System.String)">
      <summary>Creates a new instance of PeekResultDisplayInfo.</summary>
      <param name="label">The label.</param>
      <param name="labelTooltip">The label tooltip.</param>
      <param name="title">The title.</param>
      <param name="titleTooltip">The title tooltip.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo.Dispose">
      <summary>Disposes the &lt; PeekResultDisplayInfo instance.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo.Label">
      <summary>Defines the localized label used for displaying this result to the user.</summary>
      <returns>The localized label used for displaying this result to the user.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo.LabelTooltip">
      <summary>Defines the localized label tooltip used for displaying this result to the user. Supported content types are strings and UIElement" instances.</summary>
      <returns>The localized label tooltip used for displaying this result to the user.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo.Title">
      <summary>Defines the localized title used for displaying this result to the user.</summary>
      <returns>The localized title used for displaying this result to the user.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo.TitleTooltip">
      <summary>Defines the localized title tooltip used for displaying this result to the user. Supported content types are strings and UIElement instances.</summary>
      <returns>The localized title tooltip used for displaying this result to the user.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo2">
      <summary>Defines the first character's index of the "interesting" token in the label. For instance, if peek references was triggered on a method, this would be the first character's index in the label that contains the method name. This index is bound to IPeekResultDisplayInfo.Label. It has nothing to do with the span of text that initialized peek.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo2.#ctor(System.String,System.Object,System.String,System.String,System.Int32,System.Int32)">
      <summary>Creates s new instance of PeekResultDisplayInfo2.</summary>
      <param name="label">The label.</param>
      <param name="labelTooltip">The label tooltip.</param>
      <param name="title">The title.</param>
      <param name="titleTooltip">The title tooltip.</param>
      <param name="startIndexOfTokenInLabel">The start index of the token.</param>
      <param name="lengthOfTokenInLabel">The length of the token.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo2.LengthOfTokenInLabel">
      <summary>Defines the length of the "interesting" token in the label. For instance, if peek references was triggered on a method, this would be the length of the method name. This length is bound to IPeekResultDisplayInfo.Label. It has nothing to do with the span of text that initialized peek.</summary>
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo2.StartIndexOfTokenInLabel">
      <summary>Defines the index of the first character of the "interesting" token in the label. For instance, if the peek reference was triggered on a method, this would be the first character's index in the label that contains the method name. This index is bound to IPeekResultDisplayInfo.Label. It has nothing to do with the span of text that initialized peek.</summary>
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions">
      <summary>Represents a set of parameters that control IPeekSessioncreation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,System.String,Microsoft.VisualStudio.Text.ITrackingPoint,System.Nullable{System.Double},System.Boolean,Microsoft.VisualStudio.Language.Intellisense.IPeekResizeListener,System.Boolean)">
      <summary>Creates a new instance of PeekSessionCreationOptions that will create a Peek session using the default sizing behavior.</summary>
      <param name="textView">The ITextView over which to trigger a Peek session.</param>
      <param name="relationshipName">The name of the requested relationship to be explored by a Peek session.</param>
      <param name="triggerPoint">The point in the text buffer at which a Peek session is requested. If set to null, the current carat position is assumed.</param>
      <param name="allowUserResize">Specifies whether the Peek control resizers should be enabled.</param>
      <param name="resizeListener">A callback object that will be notified when the user resizes the Peek control.</param>
      <param name="shouldFocusOnLoad">Specifies whether the Peek control should get focus when it is first loaded.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.AllowUserResize">
      <summary>Indicates whether the top and bottom resizers on the Peek control should be enabled.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.DefaultHeight">
      <summary>The default height, in pixels, for the Peek control. This height will be overridden by presentations which implement IDesiredHeightProvider. If this is null, then the Peek control will attempt to guess an ideal height as a percentage of the view instead of an absolute pixel height.</summary>
      <returns>The default height, in pixels, for the Peek control.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.RelationshipName">
      <summary>The name of the requested relationship to be explored by a Peek session.</summary>
      <returns>The name of the requested relationship to be explored by a Peek session.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.ResizeListener">
      <summary>If set, this contains an object that will be notified when the user resizes the Peek control.</summary>
      <returns>Returns <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResizeListener" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.ShouldFocusOnLoad">
      <summary>Indicates whether or not the Peek control should get the user's focus when it is first loaded.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.TextView">
      <summary>The ITextView over which to create a Peek session.</summary>
      <returns>The ITextView over which to create a Peek session.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.TriggerPoint">
      <summary>The point in the text buffer at which a Peek session is requested.</summary>
      <returns>The point in the text buffer at which a Peek session is requested.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.PredefinedPeekRelationships">
      <summary>Predefined Peek relationships.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.PredefinedPeekRelationships.Definitions">
      <summary>The definitions.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.PredefinedSuggestedActionCategoryNames">
      <summary>Defines a set of predefined suggested action category names.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.PredefinedSuggestedActionCategoryNames.Any">
      <summary>A root category that include any suggested action.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.PredefinedSuggestedActionCategoryNames.CodeFix">
      <summary>A category of suggested actions for fixing code issues.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.PredefinedSuggestedActionCategoryNames.ErrorFix">
      <summary>A category of suggested actions for fixing errors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.PredefinedSuggestedActionCategoryNames.Refactoring">
      <summary>A category of suggested actions for code refactoring.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.PredefinedSuggestedActionCategoryNames.StyleFix">
      <summary>A category of suggested actions for fixing style violations.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.QuerySuggestedActionCompletionStatus">
      <summary>Represents the completion status after querying LightBulb providers for suggested actions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.QuerySuggestedActionCompletionStatus.Canceled">
      <summary>Querying LightBulb providers for suggested actions was canceled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.QuerySuggestedActionCompletionStatus.Completed">
      <summary>Querying LightBulb providers for suggested actions completed successfully.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.QuickInfoPresenterStyle">
      <summary>Defines a set of properties that will be used to style the default QuickInfo presenter.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.QuickInfoPresenterStyle.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.QuickInfoPresenterStyle" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.QuickInfoPresenterStyle.AreGradientsAllowed">
      <summary>Determines whether or not gradients should be used in the presentation of a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession" />.</summary>
      <returns>true if gradients are allowed, otherwise false, or null.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.QuickInfoPresenterStyle.BackgroundBrush">
      <summary>Gets a <see cref="T:System.Windows.Media.Brush" /> that is used to paint the background of the completion presenter.</summary>
      <returns>The background <see cref="T:System.Windows.Media.Brush" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.QuickInfoPresenterStyle.BorderBrush">
      <summary>Gets a <see cref="T:System.Windows.Media.Brush" /> that is used to paint the borders in the completion presenter.</summary>
      <returns>The border <see cref="T:System.Windows.Media.Brush" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.QuickInfoPresenterStyle.QuickInfoAppearanceCategory">
      <summary>Gets a string that identifies the appearance category for the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />s displayed in the default QuickInfo presenter.</summary>
      <returns>The appearance category.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.RecreateContentEventArgs">
      <summary>Provides information about a request to recreate a content of IPeekResultPresentation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.RecreateContentEventArgs.#ctor(System.Boolean)">
      <summary>Creates s new instance of RecreateContentEventArgs.</summary>
      <param name="isResultContentDeleted">True if the content was deleted.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.RecreateContentEventArgs.IsResultContentDeleted">
      <summary>Determines whether the Peek result's content presented by IPeekResultPresentation was deleted.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.SelectedSignatureChangedEventArgs">
      <summary>Provides information about selected signature changes for the <see cref="E:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession.SelectedSignatureChanged" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.SelectedSignatureChangedEventArgs.#ctor(Microsoft.VisualStudio.Language.Intellisense.ISignature,Microsoft.VisualStudio.Language.Intellisense.ISignature)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SelectedSignatureChangedEventArgs" />.</summary>
      <param name="previousSelectedSignature">The signature that was previously selected.</param>
      <param name="newSelectedSignature">The signature that is currently selected.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.SelectedSignatureChangedEventArgs.NewSelectedSignature">
      <summary>Gets the signature that is currently selected.</summary>
      <returns>The currently selected signature.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.SelectedSignatureChangedEventArgs.PreviousSelectedSignature">
      <summary>Gets the signature that was previously selected.</summary>
      <returns>The previously selected signature.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle">
      <summary>Represents a set of properties used to define the style of the default signature help presenter.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.AreGradientsAllowed">
      <summary>Determines whether or not gradients should be used in the presentation of a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession" />.</summary>
      <returns>true if gradients are allowed, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.BackgroundBrush">
      <summary>Gets a <see cref="T:System.Windows.Media.Brush" /> used to paint the background of the signature help presenter.</summary>
      <returns>The background brush.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.BorderBrush">
      <summary>Gets a <see cref="T:System.Windows.Media.Brush" /> used to paint the borders in the signature help presenter.</summary>
      <returns>The border brush.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.CurrentParameterDocumentationTextRunProperties">
      <summary>Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> used to format the text of the current parameter documentation.</summary>
      <returns>The text run properties of the current parameter documentation.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.CurrentParameterNameTextRunProperties">
      <summary>Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> used to format the text of the current parameter name.</summary>
      <returns>The text run properties of the current parameter name.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.ForegroundBrush">
      <summary>Gets a <see cref="T:System.Windows.Media.Brush" /> used to paint the foreground of the signature help presenter.</summary>
      <returns>The foreground brush.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.SignatureAppearanceCategory">
      <summary>Gets the identifier of the appearance category for the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> objects displayed in the default signature help presenter.</summary>
      <returns>The identifier of the appearance category.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.SignatureDocumentationTextRunProperties">
      <summary>Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that will be used to format the text of the signature documentation.</summary>
      <returns>The text run properties for the signature documentation.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.UpDownSignatureTextRunProperties">
      <summary>Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that will be used to format the text of up/down signature arrows.</summary>
      <returns>The text run properties of the up/down signature arrows.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.SmartTag">
      <summary>A tag used to contain actions that may be performed on a span of text as part of a smart tag session. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.SmartTag.#ctor(Microsoft.VisualStudio.Language.Intellisense.SmartTagType,System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet})">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SmartTag" />.</summary>
      <param name="smartTagType">The type of smart tag session that should be created.</param>
      <param name="actionSets">The set of actions that should be a part of the smart tag session.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.SmartTag.ActionSets">
      <summary>The set of actions that should be a part of the smart tag session.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.SmartTag.SmartTagType">
      <summary>The type of smart tag session that should be created.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SmartTagType" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet">
      <summary>Represents a set of smart tag actions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Language.Intellisense.ISmartTagAction})">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet" />.</summary>
      <param name="actions">The set of actions contained in this action set.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet.Actions">
      <summary>Gets the collection of smart tag actions.</summary>
      <returns>The collection of smart tag actions.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.SmartTagState">
      <summary>The set of smart tag session states.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.SmartTagState.Collapsed">
      <summary>The session is rendered in collapsed mode, which in the default presenter is indicated by a small colored rectangle</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.SmartTagState.Expanded">
      <summary>The session is rendered in expanded mode, which in the default presenter is indicated by a menu from which the user can select actions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.SmartTagState.Intermediate">
      <summary>The session is neither collapsed nor expanded. In the default presenter, this is indicated by a button but no action menu.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.SmartTagType">
      <summary>The set of smart tag session types.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.SmartTagType.Ephemeral">
      <summary>A tag that is valid only for a specific period of time. This type of tag is displayed in response to a modification of the buffer that could trigger additional actions, such as refactoring.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.SmartTagType.Factoid">
      <summary>A general tag that is valid for a long period of time. This type indicates an action that may be performed on a region of text, and is displayed independently of user actions.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup">
      <summary>Describes the different types of glyphs that can be displayed in the default completion tool implementation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphArrow">
      <summary>Describes arrow symbols.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphAssembly">
      <summary>Describes symbols for assemblies.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphBscFile">
      <summary>Describes symbols for BSC files.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphCallersGraph">
      <summary>Describes symbols for callers graphs.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphCallGraph">
      <summary>Describes symbols for call graphs.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphClosedFolder">
      <summary>Describes symbols for closed folders.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphCompletionWarning">
      <summary>Describes symbols for completion warnings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphCoolProject">
      <summary>Describes symbols for C# projects.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphCppProject">
      <summary>Describes symbols for C++ projects.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphCSharpExpansion">
      <summary>Describes symbols for C# expansions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphCSharpFile">
      <summary>Describes symbols for C# files.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphDialogId">
      <summary>Describes symbols for dialog identifiers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphExtensionMethod">
      <summary>Describes symbols for extension methods.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphExtensionMethodFriend">
      <summary>Describes symbols for friend extension methods.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphExtensionMethodInternal">
      <summary>Describes symbols for internal extension methods.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphExtensionMethodPrivate">
      <summary>Describes symbols for private extension methods.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphExtensionMethodProtected">
      <summary>Describes symbols for protected extension methods.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphExtensionMethodShortcut">
      <summary>Describes symbols for extension method shortcuts.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphForwardType">
      <summary>Describes symbols for forwarded types.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupClass">
      <summary>Describes symbols for classes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupConstant">
      <summary>Describes symbols for constants.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupDelegate">
      <summary>Describes symbols for delegates.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupEnum">
      <summary>Describes symbols for enumerations.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupEnumMember">
      <summary>Describes symbols for enumeration members.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupError">
      <summary>Describes symbols for errors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupEvent">
      <summary>Describes symbols for events.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupException">
      <summary>Describes symbols for exceptions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupField">
      <summary>Describes symbols for fields.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupInterface">
      <summary>Describes symbols for interfaces.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupIntrinsic">
      <summary>Describes intrinsic symbols.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupJSharpClass">
      <summary>Describes symbols for J# classes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupJSharpField">
      <summary>Describes symbols for J# fields.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupJSharpInterface">
      <summary>Describes symbols for J# interfaces.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupJSharpMethod">
      <summary>Describes symbols for J# methods.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupJSharpNamespace">
      <summary>Describes symbols for J# namespaces.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupMacro">
      <summary>Describes symbols for macros.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupMap">
      <summary>Describes symbols for maps.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupMapItem">
      <summary>Describes symbols for map items.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupMethod">
      <summary>Describes symbols for methods.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupModule">
      <summary>Describes symbols for modules.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupNamespace">
      <summary>Describes symbols for namespaces.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupOperator">
      <summary>Describes symbols for operators.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupOverload">
      <summary>Describes symbols for overloads.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupProperty">
      <summary>Describes symbols for properties.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupStruct">
      <summary>Describes symbols for structures.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupTemplate">
      <summary>Describes symbols for templates.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupType">
      <summary>Describes symbols for types.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupTypedef">
      <summary>Describes symbols for typedefs.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupUnion">
      <summary>Describes symbols for unions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupUnknown">
      <summary>Describes symbols for unknown types.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupValueType">
      <summary>Describes symbols for value types.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupVariable">
      <summary>Describes symbols for variables.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphInformation">
      <summary>Describes symbols for information.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphJSharpDocument">
      <summary>Describes symbols for J# documents.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphJSharpProject">
      <summary>Describes symbols for J# projects.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphKeyword">
      <summary>Describes symbols for keywords.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphLibrary">
      <summary>Describes symbols for libraries.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphMaybeCall">
      <summary>Describes symbols for something that may be a call.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphMaybeCaller">
      <summary>Describes symbols for something that may be a caller.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphMaybeReference">
      <summary>Describes symbols for something that may be a reference.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphOpenFolder">
      <summary>Describes symbols for open folders.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphRecursion">
      <summary>Describes symbols for recursion.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphReference">
      <summary>Describes symbols for references.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphVBProject">
      <summary>Describes symbols for VB projects.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphWarning">
      <summary>Describes symbols for build warnings.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlAttribute">
      <summary>Describes symbols for XML attributes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlAttributeCheck">
      <summary>Describes symbols with a check mark for XML attributes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlAttributeQuestion">
      <summary>Describes symbols with a question mark for XML attributes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlChild">
      <summary>Describes symbols for child XML elements.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlChildCheck">
      <summary>Describes symbols with a check mark for XML child elements.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlChildQuestion">
      <summary>Describes symbols with a question mark for XML child elements.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlDescendant">
      <summary>Describes symbols for descendant XML elements.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlDescendantCheck">
      <summary>Describes symbols with a check mark for XML descendant elements.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlDescendantQuestion">
      <summary>Describes symbols with a question mark for XML descendant elements.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlItem">
      <summary>Describes symbols for XML items.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlNamespace">
      <summary>Describes symbols for XML namespaces.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem">
      <summary>Describes icons or glyphs that are used in statement completion.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem.GlyphItemFriend">
      <summary>Describes a friend symbol.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem.GlyphItemInternal">
      <summary>Describes an internal symbol.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem.GlyphItemPrivate">
      <summary>Describes a private symbol.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem.GlyphItemProtected">
      <summary>Describes a protected symbol.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem.GlyphItemPublic">
      <summary>Describes a public symbol.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem.GlyphItemShortcut">
      <summary>Describes a shortcut symbol.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem.TotalGlyphItems">
      <summary>Describes a symbol that has all (or none) of the standard attributes.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionCategoryDefinition">
      <summary>Defines a suggested action category.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionCategoryDefinition.#ctor">
      <summary>Initializes a new instance of SuggestedActionCategoryDefinition.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet">
      <summary>Represents a list of suggested actions that are all applicable to a span of text in an ITextBuffer. Global suggested actions are not applicable to any particular span of text.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction},Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority,System.Nullable{Microsoft.VisualStudio.Text.Span})">
      <summary>Creates a new instance of the SuggestedActionSet for the specified list of suggested actions, and optionally an applicable span of text.</summary>
      <param name="actions">A list of suggested actions.</param>
      <param name="priority">The SuggestedActionSetPriority value of this list of suggested actions.</param>
      <param name="applicableToSpan">The applicability span for this list of suggested actions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction},System.Object,Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority,System.Nullable{Microsoft.VisualStudio.Text.Span})">
      <summary>Creates a new instance of the SuggestedActionSet for the specified list of suggested actions with a header and optionally an applicable span of text.</summary>
      <param name="actions">A list of suggested actions.</param>
      <param name="title">The title for this list of suggested actions.</param>
      <param name="priority">The SuggestedActionSetPriority value of this list of suggested actions.</param>
      <param name="applicableToSpan">The applicability span for this list of suggested actions.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet.Actions">
      <summary>Gets a list of suggested actions.</summary>
      <returns>A list of suggested actions.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet.ApplicableToSpan">
      <summary>Gets the applicability span for this list of suggested actions. The applicability span is the span of text in the ITextBuffer to which the list of suggested actions pertains, if any.</summary>
      <returns>The applicability span for this list of suggested actions.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet.Priority">
      <summary>Gets the SuggestedActionSetPriority value of this list of suggested actions.</summary>
      <returns>The SuggestedActionSetPriority value of this list of suggested actions.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet.Title">
      <summary>Gets the title for this list of suggested actions.</summary>
      <returns>The title for this list of suggested actions.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority">
      <summary>Represents a priority for a SuggestedActionSet that is used to order suggestions when presenting them to a user.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority.High">
      <summary>High priority suggestion.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority.Low">
      <summary>Low priority suggestion.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority.Medium">
      <summary>Medium priority suggestion.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority.None">
      <summary>No particular priority.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.SupportsPeekRelationshipAttribute">
      <summary>Use this attribute to specify that an IPeekableItemSourceProvider supports a specific IPeekRelationship.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.SupportsPeekRelationshipAttribute.#ctor(System.String)">
      <summary>Construct a new instance of the attribute.</summary>
      <param name="relationshipName">The name of the relationship that we want to mark as supported.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipName" /> is null or empty.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.SupportsPeekRelationshipAttribute.SupportedRelationships">
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.SupportsStandaloneFilesAttribute">
      <summary>Indicates that an IPeekableItemSourceProvider supports standalone (not part of a project) files. The default value is false so the absence of this attribute on an &lt; IPeekableItemSourceProvider means it doesn't support standalone files.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.SupportsStandaloneFilesAttribute.#ctor(System.Boolean)">
      <summary>Creates a new insatnce of SupportsStandaloneFilesAttribute.</summary>
      <param name="supportsStandaloneFiles">Sets whether an IPeekableItemSourceProvider&gt; supports standalone (not part of a project) files.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.SupportsStandaloneFilesAttribute.SupportsStandaloneFiles">
      <summary>Determines whether an IPeekableItemSourceProvider supports standalone (not part of a project) files.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.UIElementType">
      <summary>Describes types of UIElements to be provided by an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IUIElementProvider`2" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.UIElementType.Large">
      <summary>A large UIElement. A large UIElement is likely to be displayed by itself (not with other similar elements) and should present detailed information about the object in question.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.UIElementType.Small">
      <summary>A small UIElement. A small UIElement is likely to be placed in a list together with other small UIElements.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Language.Intellisense.UIElementType.Tooltip">
      <summary>A UIElement to be hosted in a tooltip that represents the object in question.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Language.Intellisense.ValueChangedEventArgs`1">
      <summary>Provides information about value changes of all kinds.</summary>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Language.Intellisense.ValueChangedEventArgs`1.#ctor(`0,`0)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ValueChangedEventArgs`1" /> with the new and old values.</summary>
      <param name="oldValue">The old value.</param>
      <param name="newValue">The new value.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ValueChangedEventArgs`1.NewValue">
      <summary>Gets the new value.</summary>
      <returns>The new value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Language.Intellisense.ValueChangedEventArgs`1.OldValue">
      <summary>Gets the old value.</summary>
      <returns>The old value.</returns>
    </member>
  </members>
</doc>